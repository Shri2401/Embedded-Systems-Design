                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ANSI-C Compiler
                                      3 ; Version 4.2.0 #13081 (MINGW64)
                                      4 ;--------------------------------------------------------
                                      5 	.module characters
                                      6 	.optsdcc -mmcs51 --model-large
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; Public variables in this module
                                     10 ;--------------------------------------------------------
                                     11 	.globl _dataout
                                     12 	.globl _del_buff
                                     13 	.globl _getinp_30_300
                                     14 	.globl _free
                                     15 	.globl _malloc
                                     16 	.globl _printf_tiny
                                     17 	.globl _TF1
                                     18 	.globl _TR1
                                     19 	.globl _TF0
                                     20 	.globl _TR0
                                     21 	.globl _IE1
                                     22 	.globl _IT1
                                     23 	.globl _IE0
                                     24 	.globl _IT0
                                     25 	.globl _SM0
                                     26 	.globl _SM1
                                     27 	.globl _SM2
                                     28 	.globl _REN
                                     29 	.globl _TB8
                                     30 	.globl _RB8
                                     31 	.globl _TI
                                     32 	.globl _RI
                                     33 	.globl _CY
                                     34 	.globl _AC
                                     35 	.globl _F0
                                     36 	.globl _RS1
                                     37 	.globl _RS0
                                     38 	.globl _OV
                                     39 	.globl _F1
                                     40 	.globl _P
                                     41 	.globl _RD
                                     42 	.globl _WR
                                     43 	.globl _T1
                                     44 	.globl _T0
                                     45 	.globl _INT1
                                     46 	.globl _INT0
                                     47 	.globl _TXD0
                                     48 	.globl _TXD
                                     49 	.globl _RXD0
                                     50 	.globl _RXD
                                     51 	.globl _P3_7
                                     52 	.globl _P3_6
                                     53 	.globl _P3_5
                                     54 	.globl _P3_4
                                     55 	.globl _P3_3
                                     56 	.globl _P3_2
                                     57 	.globl _P3_1
                                     58 	.globl _P3_0
                                     59 	.globl _P2_7
                                     60 	.globl _P2_6
                                     61 	.globl _P2_5
                                     62 	.globl _P2_4
                                     63 	.globl _P2_3
                                     64 	.globl _P2_2
                                     65 	.globl _P2_1
                                     66 	.globl _P2_0
                                     67 	.globl _P1_7
                                     68 	.globl _P1_6
                                     69 	.globl _P1_5
                                     70 	.globl _P1_4
                                     71 	.globl _P1_3
                                     72 	.globl _P1_2
                                     73 	.globl _P1_1
                                     74 	.globl _P1_0
                                     75 	.globl _P0_7
                                     76 	.globl _P0_6
                                     77 	.globl _P0_5
                                     78 	.globl _P0_4
                                     79 	.globl _P0_3
                                     80 	.globl _P0_2
                                     81 	.globl _P0_1
                                     82 	.globl _P0_0
                                     83 	.globl _PS
                                     84 	.globl _PT1
                                     85 	.globl _PX1
                                     86 	.globl _PT0
                                     87 	.globl _PX0
                                     88 	.globl _EA
                                     89 	.globl _ES
                                     90 	.globl _ET1
                                     91 	.globl _EX1
                                     92 	.globl _ET0
                                     93 	.globl _EX0
                                     94 	.globl _BREG_F7
                                     95 	.globl _BREG_F6
                                     96 	.globl _BREG_F5
                                     97 	.globl _BREG_F4
                                     98 	.globl _BREG_F3
                                     99 	.globl _BREG_F2
                                    100 	.globl _BREG_F1
                                    101 	.globl _BREG_F0
                                    102 	.globl _P5_7
                                    103 	.globl _P5_6
                                    104 	.globl _P5_5
                                    105 	.globl _P5_4
                                    106 	.globl _P5_3
                                    107 	.globl _P5_2
                                    108 	.globl _P5_1
                                    109 	.globl _P5_0
                                    110 	.globl _P4_7
                                    111 	.globl _P4_6
                                    112 	.globl _P4_5
                                    113 	.globl _P4_4
                                    114 	.globl _P4_3
                                    115 	.globl _P4_2
                                    116 	.globl _P4_1
                                    117 	.globl _P4_0
                                    118 	.globl _PX0L
                                    119 	.globl _PT0L
                                    120 	.globl _PX1L
                                    121 	.globl _PT1L
                                    122 	.globl _PSL
                                    123 	.globl _PT2L
                                    124 	.globl _PPCL
                                    125 	.globl _EC
                                    126 	.globl _CCF0
                                    127 	.globl _CCF1
                                    128 	.globl _CCF2
                                    129 	.globl _CCF3
                                    130 	.globl _CCF4
                                    131 	.globl _CR
                                    132 	.globl _CF
                                    133 	.globl _TF2
                                    134 	.globl _EXF2
                                    135 	.globl _RCLK
                                    136 	.globl _TCLK
                                    137 	.globl _EXEN2
                                    138 	.globl _TR2
                                    139 	.globl _C_T2
                                    140 	.globl _CP_RL2
                                    141 	.globl _T2CON_7
                                    142 	.globl _T2CON_6
                                    143 	.globl _T2CON_5
                                    144 	.globl _T2CON_4
                                    145 	.globl _T2CON_3
                                    146 	.globl _T2CON_2
                                    147 	.globl _T2CON_1
                                    148 	.globl _T2CON_0
                                    149 	.globl _PT2
                                    150 	.globl _ET2
                                    151 	.globl _TMOD
                                    152 	.globl _TL1
                                    153 	.globl _TL0
                                    154 	.globl _TH1
                                    155 	.globl _TH0
                                    156 	.globl _TCON
                                    157 	.globl _SP
                                    158 	.globl _SCON
                                    159 	.globl _SBUF0
                                    160 	.globl _SBUF
                                    161 	.globl _PSW
                                    162 	.globl _PCON
                                    163 	.globl _P3
                                    164 	.globl _P2
                                    165 	.globl _P1
                                    166 	.globl _P0
                                    167 	.globl _IP
                                    168 	.globl _IE
                                    169 	.globl _DP0L
                                    170 	.globl _DPL
                                    171 	.globl _DP0H
                                    172 	.globl _DPH
                                    173 	.globl _B
                                    174 	.globl _ACC
                                    175 	.globl _EECON
                                    176 	.globl _KBF
                                    177 	.globl _KBE
                                    178 	.globl _KBLS
                                    179 	.globl _BRL
                                    180 	.globl _BDRCON
                                    181 	.globl _T2MOD
                                    182 	.globl _SPDAT
                                    183 	.globl _SPSTA
                                    184 	.globl _SPCON
                                    185 	.globl _SADEN
                                    186 	.globl _SADDR
                                    187 	.globl _WDTPRG
                                    188 	.globl _WDTRST
                                    189 	.globl _P5
                                    190 	.globl _P4
                                    191 	.globl _IPH1
                                    192 	.globl _IPL1
                                    193 	.globl _IPH0
                                    194 	.globl _IPL0
                                    195 	.globl _IEN1
                                    196 	.globl _IEN0
                                    197 	.globl _CMOD
                                    198 	.globl _CL
                                    199 	.globl _CH
                                    200 	.globl _CCON
                                    201 	.globl _CCAPM4
                                    202 	.globl _CCAPM3
                                    203 	.globl _CCAPM2
                                    204 	.globl _CCAPM1
                                    205 	.globl _CCAPM0
                                    206 	.globl _CCAP4L
                                    207 	.globl _CCAP3L
                                    208 	.globl _CCAP2L
                                    209 	.globl _CCAP1L
                                    210 	.globl _CCAP0L
                                    211 	.globl _CCAP4H
                                    212 	.globl _CCAP3H
                                    213 	.globl _CCAP2H
                                    214 	.globl _CCAP1H
                                    215 	.globl _CCAP0H
                                    216 	.globl _CKCON1
                                    217 	.globl _CKCON0
                                    218 	.globl _CKRL
                                    219 	.globl _AUXR1
                                    220 	.globl _AUXR
                                    221 	.globl _TH2
                                    222 	.globl _TL2
                                    223 	.globl _RCAP2H
                                    224 	.globl _RCAP2L
                                    225 	.globl _T2CON
                                    226 	.globl _enter_characters
                                    227 ;--------------------------------------------------------
                                    228 ; special function registers
                                    229 ;--------------------------------------------------------
                                    230 	.area RSEG    (ABS,DATA)
      000000                        231 	.org 0x0000
                           0000C8   232 G$T2CON$0_0$0 == 0x00c8
                           0000C8   233 _T2CON	=	0x00c8
                           0000CA   234 G$RCAP2L$0_0$0 == 0x00ca
                           0000CA   235 _RCAP2L	=	0x00ca
                           0000CB   236 G$RCAP2H$0_0$0 == 0x00cb
                           0000CB   237 _RCAP2H	=	0x00cb
                           0000CC   238 G$TL2$0_0$0 == 0x00cc
                           0000CC   239 _TL2	=	0x00cc
                           0000CD   240 G$TH2$0_0$0 == 0x00cd
                           0000CD   241 _TH2	=	0x00cd
                           00008E   242 G$AUXR$0_0$0 == 0x008e
                           00008E   243 _AUXR	=	0x008e
                           0000A2   244 G$AUXR1$0_0$0 == 0x00a2
                           0000A2   245 _AUXR1	=	0x00a2
                           000097   246 G$CKRL$0_0$0 == 0x0097
                           000097   247 _CKRL	=	0x0097
                           00008F   248 G$CKCON0$0_0$0 == 0x008f
                           00008F   249 _CKCON0	=	0x008f
                           0000AF   250 G$CKCON1$0_0$0 == 0x00af
                           0000AF   251 _CKCON1	=	0x00af
                           0000FA   252 G$CCAP0H$0_0$0 == 0x00fa
                           0000FA   253 _CCAP0H	=	0x00fa
                           0000FB   254 G$CCAP1H$0_0$0 == 0x00fb
                           0000FB   255 _CCAP1H	=	0x00fb
                           0000FC   256 G$CCAP2H$0_0$0 == 0x00fc
                           0000FC   257 _CCAP2H	=	0x00fc
                           0000FD   258 G$CCAP3H$0_0$0 == 0x00fd
                           0000FD   259 _CCAP3H	=	0x00fd
                           0000FE   260 G$CCAP4H$0_0$0 == 0x00fe
                           0000FE   261 _CCAP4H	=	0x00fe
                           0000EA   262 G$CCAP0L$0_0$0 == 0x00ea
                           0000EA   263 _CCAP0L	=	0x00ea
                           0000EB   264 G$CCAP1L$0_0$0 == 0x00eb
                           0000EB   265 _CCAP1L	=	0x00eb
                           0000EC   266 G$CCAP2L$0_0$0 == 0x00ec
                           0000EC   267 _CCAP2L	=	0x00ec
                           0000ED   268 G$CCAP3L$0_0$0 == 0x00ed
                           0000ED   269 _CCAP3L	=	0x00ed
                           0000EE   270 G$CCAP4L$0_0$0 == 0x00ee
                           0000EE   271 _CCAP4L	=	0x00ee
                           0000DA   272 G$CCAPM0$0_0$0 == 0x00da
                           0000DA   273 _CCAPM0	=	0x00da
                           0000DB   274 G$CCAPM1$0_0$0 == 0x00db
                           0000DB   275 _CCAPM1	=	0x00db
                           0000DC   276 G$CCAPM2$0_0$0 == 0x00dc
                           0000DC   277 _CCAPM2	=	0x00dc
                           0000DD   278 G$CCAPM3$0_0$0 == 0x00dd
                           0000DD   279 _CCAPM3	=	0x00dd
                           0000DE   280 G$CCAPM4$0_0$0 == 0x00de
                           0000DE   281 _CCAPM4	=	0x00de
                           0000D8   282 G$CCON$0_0$0 == 0x00d8
                           0000D8   283 _CCON	=	0x00d8
                           0000F9   284 G$CH$0_0$0 == 0x00f9
                           0000F9   285 _CH	=	0x00f9
                           0000E9   286 G$CL$0_0$0 == 0x00e9
                           0000E9   287 _CL	=	0x00e9
                           0000D9   288 G$CMOD$0_0$0 == 0x00d9
                           0000D9   289 _CMOD	=	0x00d9
                           0000A8   290 G$IEN0$0_0$0 == 0x00a8
                           0000A8   291 _IEN0	=	0x00a8
                           0000B1   292 G$IEN1$0_0$0 == 0x00b1
                           0000B1   293 _IEN1	=	0x00b1
                           0000B8   294 G$IPL0$0_0$0 == 0x00b8
                           0000B8   295 _IPL0	=	0x00b8
                           0000B7   296 G$IPH0$0_0$0 == 0x00b7
                           0000B7   297 _IPH0	=	0x00b7
                           0000B2   298 G$IPL1$0_0$0 == 0x00b2
                           0000B2   299 _IPL1	=	0x00b2
                           0000B3   300 G$IPH1$0_0$0 == 0x00b3
                           0000B3   301 _IPH1	=	0x00b3
                           0000C0   302 G$P4$0_0$0 == 0x00c0
                           0000C0   303 _P4	=	0x00c0
                           0000E8   304 G$P5$0_0$0 == 0x00e8
                           0000E8   305 _P5	=	0x00e8
                           0000A6   306 G$WDTRST$0_0$0 == 0x00a6
                           0000A6   307 _WDTRST	=	0x00a6
                           0000A7   308 G$WDTPRG$0_0$0 == 0x00a7
                           0000A7   309 _WDTPRG	=	0x00a7
                           0000A9   310 G$SADDR$0_0$0 == 0x00a9
                           0000A9   311 _SADDR	=	0x00a9
                           0000B9   312 G$SADEN$0_0$0 == 0x00b9
                           0000B9   313 _SADEN	=	0x00b9
                           0000C3   314 G$SPCON$0_0$0 == 0x00c3
                           0000C3   315 _SPCON	=	0x00c3
                           0000C4   316 G$SPSTA$0_0$0 == 0x00c4
                           0000C4   317 _SPSTA	=	0x00c4
                           0000C5   318 G$SPDAT$0_0$0 == 0x00c5
                           0000C5   319 _SPDAT	=	0x00c5
                           0000C9   320 G$T2MOD$0_0$0 == 0x00c9
                           0000C9   321 _T2MOD	=	0x00c9
                           00009B   322 G$BDRCON$0_0$0 == 0x009b
                           00009B   323 _BDRCON	=	0x009b
                           00009A   324 G$BRL$0_0$0 == 0x009a
                           00009A   325 _BRL	=	0x009a
                           00009C   326 G$KBLS$0_0$0 == 0x009c
                           00009C   327 _KBLS	=	0x009c
                           00009D   328 G$KBE$0_0$0 == 0x009d
                           00009D   329 _KBE	=	0x009d
                           00009E   330 G$KBF$0_0$0 == 0x009e
                           00009E   331 _KBF	=	0x009e
                           0000D2   332 G$EECON$0_0$0 == 0x00d2
                           0000D2   333 _EECON	=	0x00d2
                           0000E0   334 G$ACC$0_0$0 == 0x00e0
                           0000E0   335 _ACC	=	0x00e0
                           0000F0   336 G$B$0_0$0 == 0x00f0
                           0000F0   337 _B	=	0x00f0
                           000083   338 G$DPH$0_0$0 == 0x0083
                           000083   339 _DPH	=	0x0083
                           000083   340 G$DP0H$0_0$0 == 0x0083
                           000083   341 _DP0H	=	0x0083
                           000082   342 G$DPL$0_0$0 == 0x0082
                           000082   343 _DPL	=	0x0082
                           000082   344 G$DP0L$0_0$0 == 0x0082
                           000082   345 _DP0L	=	0x0082
                           0000A8   346 G$IE$0_0$0 == 0x00a8
                           0000A8   347 _IE	=	0x00a8
                           0000B8   348 G$IP$0_0$0 == 0x00b8
                           0000B8   349 _IP	=	0x00b8
                           000080   350 G$P0$0_0$0 == 0x0080
                           000080   351 _P0	=	0x0080
                           000090   352 G$P1$0_0$0 == 0x0090
                           000090   353 _P1	=	0x0090
                           0000A0   354 G$P2$0_0$0 == 0x00a0
                           0000A0   355 _P2	=	0x00a0
                           0000B0   356 G$P3$0_0$0 == 0x00b0
                           0000B0   357 _P3	=	0x00b0
                           000087   358 G$PCON$0_0$0 == 0x0087
                           000087   359 _PCON	=	0x0087
                           0000D0   360 G$PSW$0_0$0 == 0x00d0
                           0000D0   361 _PSW	=	0x00d0
                           000099   362 G$SBUF$0_0$0 == 0x0099
                           000099   363 _SBUF	=	0x0099
                           000099   364 G$SBUF0$0_0$0 == 0x0099
                           000099   365 _SBUF0	=	0x0099
                           000098   366 G$SCON$0_0$0 == 0x0098
                           000098   367 _SCON	=	0x0098
                           000081   368 G$SP$0_0$0 == 0x0081
                           000081   369 _SP	=	0x0081
                           000088   370 G$TCON$0_0$0 == 0x0088
                           000088   371 _TCON	=	0x0088
                           00008C   372 G$TH0$0_0$0 == 0x008c
                           00008C   373 _TH0	=	0x008c
                           00008D   374 G$TH1$0_0$0 == 0x008d
                           00008D   375 _TH1	=	0x008d
                           00008A   376 G$TL0$0_0$0 == 0x008a
                           00008A   377 _TL0	=	0x008a
                           00008B   378 G$TL1$0_0$0 == 0x008b
                           00008B   379 _TL1	=	0x008b
                           000089   380 G$TMOD$0_0$0 == 0x0089
                           000089   381 _TMOD	=	0x0089
                                    382 ;--------------------------------------------------------
                                    383 ; special function bits
                                    384 ;--------------------------------------------------------
                                    385 	.area RSEG    (ABS,DATA)
      000000                        386 	.org 0x0000
                           0000AD   387 G$ET2$0_0$0 == 0x00ad
                           0000AD   388 _ET2	=	0x00ad
                           0000BD   389 G$PT2$0_0$0 == 0x00bd
                           0000BD   390 _PT2	=	0x00bd
                           0000C8   391 G$T2CON_0$0_0$0 == 0x00c8
                           0000C8   392 _T2CON_0	=	0x00c8
                           0000C9   393 G$T2CON_1$0_0$0 == 0x00c9
                           0000C9   394 _T2CON_1	=	0x00c9
                           0000CA   395 G$T2CON_2$0_0$0 == 0x00ca
                           0000CA   396 _T2CON_2	=	0x00ca
                           0000CB   397 G$T2CON_3$0_0$0 == 0x00cb
                           0000CB   398 _T2CON_3	=	0x00cb
                           0000CC   399 G$T2CON_4$0_0$0 == 0x00cc
                           0000CC   400 _T2CON_4	=	0x00cc
                           0000CD   401 G$T2CON_5$0_0$0 == 0x00cd
                           0000CD   402 _T2CON_5	=	0x00cd
                           0000CE   403 G$T2CON_6$0_0$0 == 0x00ce
                           0000CE   404 _T2CON_6	=	0x00ce
                           0000CF   405 G$T2CON_7$0_0$0 == 0x00cf
                           0000CF   406 _T2CON_7	=	0x00cf
                           0000C8   407 G$CP_RL2$0_0$0 == 0x00c8
                           0000C8   408 _CP_RL2	=	0x00c8
                           0000C9   409 G$C_T2$0_0$0 == 0x00c9
                           0000C9   410 _C_T2	=	0x00c9
                           0000CA   411 G$TR2$0_0$0 == 0x00ca
                           0000CA   412 _TR2	=	0x00ca
                           0000CB   413 G$EXEN2$0_0$0 == 0x00cb
                           0000CB   414 _EXEN2	=	0x00cb
                           0000CC   415 G$TCLK$0_0$0 == 0x00cc
                           0000CC   416 _TCLK	=	0x00cc
                           0000CD   417 G$RCLK$0_0$0 == 0x00cd
                           0000CD   418 _RCLK	=	0x00cd
                           0000CE   419 G$EXF2$0_0$0 == 0x00ce
                           0000CE   420 _EXF2	=	0x00ce
                           0000CF   421 G$TF2$0_0$0 == 0x00cf
                           0000CF   422 _TF2	=	0x00cf
                           0000DF   423 G$CF$0_0$0 == 0x00df
                           0000DF   424 _CF	=	0x00df
                           0000DE   425 G$CR$0_0$0 == 0x00de
                           0000DE   426 _CR	=	0x00de
                           0000DC   427 G$CCF4$0_0$0 == 0x00dc
                           0000DC   428 _CCF4	=	0x00dc
                           0000DB   429 G$CCF3$0_0$0 == 0x00db
                           0000DB   430 _CCF3	=	0x00db
                           0000DA   431 G$CCF2$0_0$0 == 0x00da
                           0000DA   432 _CCF2	=	0x00da
                           0000D9   433 G$CCF1$0_0$0 == 0x00d9
                           0000D9   434 _CCF1	=	0x00d9
                           0000D8   435 G$CCF0$0_0$0 == 0x00d8
                           0000D8   436 _CCF0	=	0x00d8
                           0000AE   437 G$EC$0_0$0 == 0x00ae
                           0000AE   438 _EC	=	0x00ae
                           0000BE   439 G$PPCL$0_0$0 == 0x00be
                           0000BE   440 _PPCL	=	0x00be
                           0000BD   441 G$PT2L$0_0$0 == 0x00bd
                           0000BD   442 _PT2L	=	0x00bd
                           0000BC   443 G$PSL$0_0$0 == 0x00bc
                           0000BC   444 _PSL	=	0x00bc
                           0000BB   445 G$PT1L$0_0$0 == 0x00bb
                           0000BB   446 _PT1L	=	0x00bb
                           0000BA   447 G$PX1L$0_0$0 == 0x00ba
                           0000BA   448 _PX1L	=	0x00ba
                           0000B9   449 G$PT0L$0_0$0 == 0x00b9
                           0000B9   450 _PT0L	=	0x00b9
                           0000B8   451 G$PX0L$0_0$0 == 0x00b8
                           0000B8   452 _PX0L	=	0x00b8
                           0000C0   453 G$P4_0$0_0$0 == 0x00c0
                           0000C0   454 _P4_0	=	0x00c0
                           0000C1   455 G$P4_1$0_0$0 == 0x00c1
                           0000C1   456 _P4_1	=	0x00c1
                           0000C2   457 G$P4_2$0_0$0 == 0x00c2
                           0000C2   458 _P4_2	=	0x00c2
                           0000C3   459 G$P4_3$0_0$0 == 0x00c3
                           0000C3   460 _P4_3	=	0x00c3
                           0000C4   461 G$P4_4$0_0$0 == 0x00c4
                           0000C4   462 _P4_4	=	0x00c4
                           0000C5   463 G$P4_5$0_0$0 == 0x00c5
                           0000C5   464 _P4_5	=	0x00c5
                           0000C6   465 G$P4_6$0_0$0 == 0x00c6
                           0000C6   466 _P4_6	=	0x00c6
                           0000C7   467 G$P4_7$0_0$0 == 0x00c7
                           0000C7   468 _P4_7	=	0x00c7
                           0000E8   469 G$P5_0$0_0$0 == 0x00e8
                           0000E8   470 _P5_0	=	0x00e8
                           0000E9   471 G$P5_1$0_0$0 == 0x00e9
                           0000E9   472 _P5_1	=	0x00e9
                           0000EA   473 G$P5_2$0_0$0 == 0x00ea
                           0000EA   474 _P5_2	=	0x00ea
                           0000EB   475 G$P5_3$0_0$0 == 0x00eb
                           0000EB   476 _P5_3	=	0x00eb
                           0000EC   477 G$P5_4$0_0$0 == 0x00ec
                           0000EC   478 _P5_4	=	0x00ec
                           0000ED   479 G$P5_5$0_0$0 == 0x00ed
                           0000ED   480 _P5_5	=	0x00ed
                           0000EE   481 G$P5_6$0_0$0 == 0x00ee
                           0000EE   482 _P5_6	=	0x00ee
                           0000EF   483 G$P5_7$0_0$0 == 0x00ef
                           0000EF   484 _P5_7	=	0x00ef
                           0000F0   485 G$BREG_F0$0_0$0 == 0x00f0
                           0000F0   486 _BREG_F0	=	0x00f0
                           0000F1   487 G$BREG_F1$0_0$0 == 0x00f1
                           0000F1   488 _BREG_F1	=	0x00f1
                           0000F2   489 G$BREG_F2$0_0$0 == 0x00f2
                           0000F2   490 _BREG_F2	=	0x00f2
                           0000F3   491 G$BREG_F3$0_0$0 == 0x00f3
                           0000F3   492 _BREG_F3	=	0x00f3
                           0000F4   493 G$BREG_F4$0_0$0 == 0x00f4
                           0000F4   494 _BREG_F4	=	0x00f4
                           0000F5   495 G$BREG_F5$0_0$0 == 0x00f5
                           0000F5   496 _BREG_F5	=	0x00f5
                           0000F6   497 G$BREG_F6$0_0$0 == 0x00f6
                           0000F6   498 _BREG_F6	=	0x00f6
                           0000F7   499 G$BREG_F7$0_0$0 == 0x00f7
                           0000F7   500 _BREG_F7	=	0x00f7
                           0000A8   501 G$EX0$0_0$0 == 0x00a8
                           0000A8   502 _EX0	=	0x00a8
                           0000A9   503 G$ET0$0_0$0 == 0x00a9
                           0000A9   504 _ET0	=	0x00a9
                           0000AA   505 G$EX1$0_0$0 == 0x00aa
                           0000AA   506 _EX1	=	0x00aa
                           0000AB   507 G$ET1$0_0$0 == 0x00ab
                           0000AB   508 _ET1	=	0x00ab
                           0000AC   509 G$ES$0_0$0 == 0x00ac
                           0000AC   510 _ES	=	0x00ac
                           0000AF   511 G$EA$0_0$0 == 0x00af
                           0000AF   512 _EA	=	0x00af
                           0000B8   513 G$PX0$0_0$0 == 0x00b8
                           0000B8   514 _PX0	=	0x00b8
                           0000B9   515 G$PT0$0_0$0 == 0x00b9
                           0000B9   516 _PT0	=	0x00b9
                           0000BA   517 G$PX1$0_0$0 == 0x00ba
                           0000BA   518 _PX1	=	0x00ba
                           0000BB   519 G$PT1$0_0$0 == 0x00bb
                           0000BB   520 _PT1	=	0x00bb
                           0000BC   521 G$PS$0_0$0 == 0x00bc
                           0000BC   522 _PS	=	0x00bc
                           000080   523 G$P0_0$0_0$0 == 0x0080
                           000080   524 _P0_0	=	0x0080
                           000081   525 G$P0_1$0_0$0 == 0x0081
                           000081   526 _P0_1	=	0x0081
                           000082   527 G$P0_2$0_0$0 == 0x0082
                           000082   528 _P0_2	=	0x0082
                           000083   529 G$P0_3$0_0$0 == 0x0083
                           000083   530 _P0_3	=	0x0083
                           000084   531 G$P0_4$0_0$0 == 0x0084
                           000084   532 _P0_4	=	0x0084
                           000085   533 G$P0_5$0_0$0 == 0x0085
                           000085   534 _P0_5	=	0x0085
                           000086   535 G$P0_6$0_0$0 == 0x0086
                           000086   536 _P0_6	=	0x0086
                           000087   537 G$P0_7$0_0$0 == 0x0087
                           000087   538 _P0_7	=	0x0087
                           000090   539 G$P1_0$0_0$0 == 0x0090
                           000090   540 _P1_0	=	0x0090
                           000091   541 G$P1_1$0_0$0 == 0x0091
                           000091   542 _P1_1	=	0x0091
                           000092   543 G$P1_2$0_0$0 == 0x0092
                           000092   544 _P1_2	=	0x0092
                           000093   545 G$P1_3$0_0$0 == 0x0093
                           000093   546 _P1_3	=	0x0093
                           000094   547 G$P1_4$0_0$0 == 0x0094
                           000094   548 _P1_4	=	0x0094
                           000095   549 G$P1_5$0_0$0 == 0x0095
                           000095   550 _P1_5	=	0x0095
                           000096   551 G$P1_6$0_0$0 == 0x0096
                           000096   552 _P1_6	=	0x0096
                           000097   553 G$P1_7$0_0$0 == 0x0097
                           000097   554 _P1_7	=	0x0097
                           0000A0   555 G$P2_0$0_0$0 == 0x00a0
                           0000A0   556 _P2_0	=	0x00a0
                           0000A1   557 G$P2_1$0_0$0 == 0x00a1
                           0000A1   558 _P2_1	=	0x00a1
                           0000A2   559 G$P2_2$0_0$0 == 0x00a2
                           0000A2   560 _P2_2	=	0x00a2
                           0000A3   561 G$P2_3$0_0$0 == 0x00a3
                           0000A3   562 _P2_3	=	0x00a3
                           0000A4   563 G$P2_4$0_0$0 == 0x00a4
                           0000A4   564 _P2_4	=	0x00a4
                           0000A5   565 G$P2_5$0_0$0 == 0x00a5
                           0000A5   566 _P2_5	=	0x00a5
                           0000A6   567 G$P2_6$0_0$0 == 0x00a6
                           0000A6   568 _P2_6	=	0x00a6
                           0000A7   569 G$P2_7$0_0$0 == 0x00a7
                           0000A7   570 _P2_7	=	0x00a7
                           0000B0   571 G$P3_0$0_0$0 == 0x00b0
                           0000B0   572 _P3_0	=	0x00b0
                           0000B1   573 G$P3_1$0_0$0 == 0x00b1
                           0000B1   574 _P3_1	=	0x00b1
                           0000B2   575 G$P3_2$0_0$0 == 0x00b2
                           0000B2   576 _P3_2	=	0x00b2
                           0000B3   577 G$P3_3$0_0$0 == 0x00b3
                           0000B3   578 _P3_3	=	0x00b3
                           0000B4   579 G$P3_4$0_0$0 == 0x00b4
                           0000B4   580 _P3_4	=	0x00b4
                           0000B5   581 G$P3_5$0_0$0 == 0x00b5
                           0000B5   582 _P3_5	=	0x00b5
                           0000B6   583 G$P3_6$0_0$0 == 0x00b6
                           0000B6   584 _P3_6	=	0x00b6
                           0000B7   585 G$P3_7$0_0$0 == 0x00b7
                           0000B7   586 _P3_7	=	0x00b7
                           0000B0   587 G$RXD$0_0$0 == 0x00b0
                           0000B0   588 _RXD	=	0x00b0
                           0000B0   589 G$RXD0$0_0$0 == 0x00b0
                           0000B0   590 _RXD0	=	0x00b0
                           0000B1   591 G$TXD$0_0$0 == 0x00b1
                           0000B1   592 _TXD	=	0x00b1
                           0000B1   593 G$TXD0$0_0$0 == 0x00b1
                           0000B1   594 _TXD0	=	0x00b1
                           0000B2   595 G$INT0$0_0$0 == 0x00b2
                           0000B2   596 _INT0	=	0x00b2
                           0000B3   597 G$INT1$0_0$0 == 0x00b3
                           0000B3   598 _INT1	=	0x00b3
                           0000B4   599 G$T0$0_0$0 == 0x00b4
                           0000B4   600 _T0	=	0x00b4
                           0000B5   601 G$T1$0_0$0 == 0x00b5
                           0000B5   602 _T1	=	0x00b5
                           0000B6   603 G$WR$0_0$0 == 0x00b6
                           0000B6   604 _WR	=	0x00b6
                           0000B7   605 G$RD$0_0$0 == 0x00b7
                           0000B7   606 _RD	=	0x00b7
                           0000D0   607 G$P$0_0$0 == 0x00d0
                           0000D0   608 _P	=	0x00d0
                           0000D1   609 G$F1$0_0$0 == 0x00d1
                           0000D1   610 _F1	=	0x00d1
                           0000D2   611 G$OV$0_0$0 == 0x00d2
                           0000D2   612 _OV	=	0x00d2
                           0000D3   613 G$RS0$0_0$0 == 0x00d3
                           0000D3   614 _RS0	=	0x00d3
                           0000D4   615 G$RS1$0_0$0 == 0x00d4
                           0000D4   616 _RS1	=	0x00d4
                           0000D5   617 G$F0$0_0$0 == 0x00d5
                           0000D5   618 _F0	=	0x00d5
                           0000D6   619 G$AC$0_0$0 == 0x00d6
                           0000D6   620 _AC	=	0x00d6
                           0000D7   621 G$CY$0_0$0 == 0x00d7
                           0000D7   622 _CY	=	0x00d7
                           000098   623 G$RI$0_0$0 == 0x0098
                           000098   624 _RI	=	0x0098
                           000099   625 G$TI$0_0$0 == 0x0099
                           000099   626 _TI	=	0x0099
                           00009A   627 G$RB8$0_0$0 == 0x009a
                           00009A   628 _RB8	=	0x009a
                           00009B   629 G$TB8$0_0$0 == 0x009b
                           00009B   630 _TB8	=	0x009b
                           00009C   631 G$REN$0_0$0 == 0x009c
                           00009C   632 _REN	=	0x009c
                           00009D   633 G$SM2$0_0$0 == 0x009d
                           00009D   634 _SM2	=	0x009d
                           00009E   635 G$SM1$0_0$0 == 0x009e
                           00009E   636 _SM1	=	0x009e
                           00009F   637 G$SM0$0_0$0 == 0x009f
                           00009F   638 _SM0	=	0x009f
                           000088   639 G$IT0$0_0$0 == 0x0088
                           000088   640 _IT0	=	0x0088
                           000089   641 G$IE0$0_0$0 == 0x0089
                           000089   642 _IE0	=	0x0089
                           00008A   643 G$IT1$0_0$0 == 0x008a
                           00008A   644 _IT1	=	0x008a
                           00008B   645 G$IE1$0_0$0 == 0x008b
                           00008B   646 _IE1	=	0x008b
                           00008C   647 G$TR0$0_0$0 == 0x008c
                           00008C   648 _TR0	=	0x008c
                           00008D   649 G$TF0$0_0$0 == 0x008d
                           00008D   650 _TF0	=	0x008d
                           00008E   651 G$TR1$0_0$0 == 0x008e
                           00008E   652 _TR1	=	0x008e
                           00008F   653 G$TF1$0_0$0 == 0x008f
                           00008F   654 _TF1	=	0x008f
                                    655 ;--------------------------------------------------------
                                    656 ; overlayable register banks
                                    657 ;--------------------------------------------------------
                                    658 	.area REG_BANK_0	(REL,OVR,DATA)
      000000                        659 	.ds 8
                                    660 ;--------------------------------------------------------
                                    661 ; internal ram data
                                    662 ;--------------------------------------------------------
                                    663 	.area DSEG    (DATA)
                                    664 ;--------------------------------------------------------
                                    665 ; overlayable items in internal ram
                                    666 ;--------------------------------------------------------
                                    667 ;--------------------------------------------------------
                                    668 ; indirectly addressable internal ram data
                                    669 ;--------------------------------------------------------
                                    670 	.area ISEG    (DATA)
                                    671 ;--------------------------------------------------------
                                    672 ; absolute internal ram data
                                    673 ;--------------------------------------------------------
                                    674 	.area IABS    (ABS,DATA)
                                    675 	.area IABS    (ABS,DATA)
                                    676 ;--------------------------------------------------------
                                    677 ; bit data
                                    678 ;--------------------------------------------------------
                                    679 	.area BSEG    (BIT)
                                    680 ;--------------------------------------------------------
                                    681 ; paged external ram data
                                    682 ;--------------------------------------------------------
                                    683 	.area PSEG    (PAG,XDATA)
                                    684 ;--------------------------------------------------------
                                    685 ; external ram data
                                    686 ;--------------------------------------------------------
                                    687 	.area XSEG    (XDATA)
                           000000   688 Lcharacters.dataout$value$1_0$42==.
      000000                        689 _dataout_value_65536_42:
      000000                        690 	.ds 2
                           000002   691 Lcharacters.enter_characters$inp_ch$1_0$44==.
      000002                        692 _enter_characters_inp_ch_65536_44:
      000002                        693 	.ds 2
                           000004   694 Lcharacters.enter_characters$buff_size$1_0$45==.
      000004                        695 _enter_characters_buff_size_65536_45:
      000004                        696 	.ds 100
                           000068   697 Lcharacters.enter_characters$buff_0_count$1_0$45==.
      000068                        698 _enter_characters_buff_0_count_65536_45:
      000068                        699 	.ds 2
                           00006A   700 Lcharacters.enter_characters$buff_del$1_0$45==.
      00006A                        701 _enter_characters_buff_del_65536_45:
      00006A                        702 	.ds 2
                           00006C   703 Lcharacters.enter_characters$heap2$1_0$45==.
      00006C                        704 _enter_characters_heap2_65536_45:
      00006C                        705 	.ds 2
                           00006E   706 Lcharacters.enter_characters$array_n$1_0$45==.
      00006E                        707 _enter_characters_array_n_65536_45:
      00006E                        708 	.ds 2
                           000070   709 Lcharacters.enter_characters$i$1_0$45==.
      000070                        710 _enter_characters_i_65536_45:
      000070                        711 	.ds 2
                           000072   712 Lcharacters.enter_characters$buff_n$1_0$45==.
      000072                        713 _enter_characters_buff_n_65536_45:
      000072                        714 	.ds 2
                           000074   715 Lcharacters.enter_characters$total_buffer_count$1_0$45==.
      000074                        716 _enter_characters_total_buffer_count_65536_45:
      000074                        717 	.ds 2
                                    718 ;--------------------------------------------------------
                                    719 ; absolute external ram data
                                    720 ;--------------------------------------------------------
                                    721 	.area XABS    (ABS,XDATA)
                                    722 ;--------------------------------------------------------
                                    723 ; external initialized ram data
                                    724 ;--------------------------------------------------------
                                    725 	.area XISEG   (XDATA)
                                    726 	.area HOME    (CODE)
                                    727 	.area GSINIT0 (CODE)
                                    728 	.area GSINIT1 (CODE)
                                    729 	.area GSINIT2 (CODE)
                                    730 	.area GSINIT3 (CODE)
                                    731 	.area GSINIT4 (CODE)
                                    732 	.area GSINIT5 (CODE)
                                    733 	.area GSINIT  (CODE)
                                    734 	.area GSFINAL (CODE)
                                    735 	.area CSEG    (CODE)
                                    736 ;--------------------------------------------------------
                                    737 ; global & static initialisations
                                    738 ;--------------------------------------------------------
                                    739 	.area HOME    (CODE)
                                    740 	.area GSINIT  (CODE)
                                    741 	.area GSFINAL (CODE)
                                    742 	.area GSINIT  (CODE)
                                    743 ;------------------------------------------------------------
                                    744 ;Allocation info for local variables in function 'enter_characters'
                                    745 ;------------------------------------------------------------
                                    746 ;inp_ch                    Allocated with name '_enter_characters_inp_ch_65536_44'
                                    747 ;buff_size                 Allocated with name '_enter_characters_buff_size_65536_45'
                                    748 ;buff_0_count              Allocated with name '_enter_characters_buff_0_count_65536_45'
                                    749 ;buff_del                  Allocated with name '_enter_characters_buff_del_65536_45'
                                    750 ;heap2                     Allocated with name '_enter_characters_heap2_65536_45'
                                    751 ;array_n                   Allocated with name '_enter_characters_array_n_65536_45'
                                    752 ;i                         Allocated with name '_enter_characters_i_65536_45'
                                    753 ;buff_n                    Allocated with name '_enter_characters_buff_n_65536_45'
                                    754 ;total_buffer_count        Allocated with name '_enter_characters_total_buffer_count_65536_45'
                                    755 ;m                         Allocated with name '_enter_characters_m_262144_60'
                                    756 ;------------------------------------------------------------
                           000000   757 	G$enter_characters$0$0 ==.
                           000000   758 	C$characters.c$43$1_0$45 ==.
                                    759 ;	characters.c:43: static int array_n = 0;
      000000 90r00r6E         [24]  760 	mov	dptr,#_enter_characters_array_n_65536_45
      000003 E4               [12]  761 	clr	a
      000004 F0               [24]  762 	movx	@dptr,a
      000005 A3               [24]  763 	inc	dptr
      000006 F0               [24]  764 	movx	@dptr,a
                           000007   765 	C$characters.c$44$1_0$45 ==.
                                    766 ;	characters.c:44: static int i = 0;
      000007 90r00r70         [24]  767 	mov	dptr,#_enter_characters_i_65536_45
      00000A F0               [24]  768 	movx	@dptr,a
      00000B A3               [24]  769 	inc	dptr
      00000C F0               [24]  770 	movx	@dptr,a
                           00000D   771 	C$characters.c$45$1_0$45 ==.
                                    772 ;	characters.c:45: static int buff_n = 2;
      00000D 90r00r72         [24]  773 	mov	dptr,#_enter_characters_buff_n_65536_45
      000010 74 02            [12]  774 	mov	a,#0x02
      000012 F0               [24]  775 	movx	@dptr,a
      000013 E4               [12]  776 	clr	a
      000014 A3               [24]  777 	inc	dptr
      000015 F0               [24]  778 	movx	@dptr,a
                                    779 ;--------------------------------------------------------
                                    780 ; Home
                                    781 ;--------------------------------------------------------
                                    782 	.area HOME    (CODE)
                                    783 	.area HOME    (CODE)
                                    784 ;--------------------------------------------------------
                                    785 ; code
                                    786 ;--------------------------------------------------------
                                    787 	.area CSEG    (CODE)
                                    788 ;------------------------------------------------------------
                                    789 ;Allocation info for local variables in function 'dataout'
                                    790 ;------------------------------------------------------------
                                    791 ;value                     Allocated with name '_dataout_value_65536_42'
                                    792 ;ptr                       Allocated with name '_dataout_ptr_65536_43'
                                    793 ;------------------------------------------------------------
                           000000   794 	G$dataout$0$0 ==.
                           000000   795 	C$characters.c$24$0_0$43 ==.
                                    796 ;	characters.c:24: void dataout(uint16_t value)
                                    797 ;	-----------------------------------------
                                    798 ;	 function dataout
                                    799 ;	-----------------------------------------
      000000                        800 _dataout:
                           000007   801 	ar7 = 0x07
                           000006   802 	ar6 = 0x06
                           000005   803 	ar5 = 0x05
                           000004   804 	ar4 = 0x04
                           000003   805 	ar3 = 0x03
                           000002   806 	ar2 = 0x02
                           000001   807 	ar1 = 0x01
                           000000   808 	ar0 = 0x00
      000000 AF 83            [24]  809 	mov	r7,dph
      000002 E5 82            [12]  810 	mov	a,dpl
      000004 90r00r00         [24]  811 	mov	dptr,#_dataout_value_65536_42
      000007 F0               [24]  812 	movx	@dptr,a
      000008 EF               [12]  813 	mov	a,r7
      000009 A3               [24]  814 	inc	dptr
      00000A F0               [24]  815 	movx	@dptr,a
                           00000B   816 	C$characters.c$27$1_0$43 ==.
                                    817 ;	characters.c:27: *ptr = value;
      00000B 90r00r00         [24]  818 	mov	dptr,#_dataout_value_65536_42
      00000E E0               [24]  819 	movx	a,@dptr
      00000F FE               [12]  820 	mov	r6,a
      000010 A3               [24]  821 	inc	dptr
      000011 E0               [24]  822 	movx	a,@dptr
      000012 FF               [12]  823 	mov	r7,a
      000013 90 7F F0         [24]  824 	mov	dptr,#0x7ff0
      000016 EE               [12]  825 	mov	a,r6
      000017 F0               [24]  826 	movx	@dptr,a
      000018 EF               [12]  827 	mov	a,r7
      000019 A3               [24]  828 	inc	dptr
      00001A F0               [24]  829 	movx	@dptr,a
                           00001B   830 	C$characters.c$28$1_0$43 ==.
                                    831 ;	characters.c:28: }
                           00001B   832 	C$characters.c$28$1_0$43 ==.
                           00001B   833 	XG$dataout$0$0 ==.
      00001B 22               [24]  834 	ret
                                    835 ;------------------------------------------------------------
                                    836 ;Allocation info for local variables in function 'enter_characters'
                                    837 ;------------------------------------------------------------
                                    838 ;inp_ch                    Allocated with name '_enter_characters_inp_ch_65536_44'
                                    839 ;buff_size                 Allocated with name '_enter_characters_buff_size_65536_45'
                                    840 ;buff_0_count              Allocated with name '_enter_characters_buff_0_count_65536_45'
                                    841 ;buff_del                  Allocated with name '_enter_characters_buff_del_65536_45'
                                    842 ;heap2                     Allocated with name '_enter_characters_heap2_65536_45'
                                    843 ;array_n                   Allocated with name '_enter_characters_array_n_65536_45'
                                    844 ;i                         Allocated with name '_enter_characters_i_65536_45'
                                    845 ;buff_n                    Allocated with name '_enter_characters_buff_n_65536_45'
                                    846 ;total_buffer_count        Allocated with name '_enter_characters_total_buffer_count_65536_45'
                                    847 ;m                         Allocated with name '_enter_characters_m_262144_60'
                                    848 ;------------------------------------------------------------
                           00001C   849 	G$enter_characters$0$0 ==.
                           00001C   850 	C$characters.c$37$1_0$45 ==.
                                    851 ;	characters.c:37: void enter_characters(int inp_ch)
                                    852 ;	-----------------------------------------
                                    853 ;	 function enter_characters
                                    854 ;	-----------------------------------------
      00001C                        855 _enter_characters:
      00001C AF 83            [24]  856 	mov	r7,dph
      00001E E5 82            [12]  857 	mov	a,dpl
      000020 90r00r02         [24]  858 	mov	dptr,#_enter_characters_inp_ch_65536_44
      000023 F0               [24]  859 	movx	@dptr,a
      000024 EF               [12]  860 	mov	a,r7
      000025 A3               [24]  861 	inc	dptr
      000026 F0               [24]  862 	movx	@dptr,a
                           000027   863 	C$characters.c$48$1_0$45 ==.
                                    864 ;	characters.c:48: switch(inp_ch){
      000027 90r00r02         [24]  865 	mov	dptr,#_enter_characters_inp_ch_65536_44
      00002A E0               [24]  866 	movx	a,@dptr
      00002B FE               [12]  867 	mov	r6,a
      00002C A3               [24]  868 	inc	dptr
      00002D E0               [24]  869 	movx	a,@dptr
      00002E FF               [12]  870 	mov	r7,a
      00002F BE 2B 05         [24]  871 	cjne	r6,#0x2b,00241$
      000032 BF 00 02         [24]  872 	cjne	r7,#0x00,00241$
      000035 80 27            [24]  873 	sjmp	00101$
      000037                        874 00241$:
      000037 BE 2D 06         [24]  875 	cjne	r6,#0x2d,00242$
      00003A BF 00 03         [24]  876 	cjne	r7,#0x00,00242$
      00003D 02r01rB6         [24]  877 	ljmp	00105$
      000040                        878 00242$:
      000040 BE 3D 06         [24]  879 	cjne	r6,#0x3d,00243$
      000043 BF 00 03         [24]  880 	cjne	r7,#0x00,00243$
      000046 02r06r11         [24]  881 	ljmp	00127$
      000049                        882 00243$:
      000049 BE 3F 06         [24]  883 	cjne	r6,#0x3f,00244$
      00004C BF 00 03         [24]  884 	cjne	r7,#0x00,00244$
      00004F 02r03r30         [24]  885 	ljmp	00116$
      000052                        886 00244$:
      000052 BE 40 06         [24]  887 	cjne	r6,#0x40,00245$
      000055 BF 00 03         [24]  888 	cjne	r7,#0x00,00245$
      000058 02r06rF2         [24]  889 	ljmp	00137$
      00005B                        890 00245$:
      00005B 02r08r1B         [24]  891 	ljmp	00150$
                           00005E   892 	C$characters.c$50$2_0$46 ==.
                                    893 ;	characters.c:50: case '+':
      00005E                        894 00101$:
                           00005E   895 	C$characters.c$52$3_0$47 ==.
                                    896 ;	characters.c:52: DEBUGPORT(0x52);
      00005E 90 00 52         [24]  897 	mov	dptr,#0x0052
      000061 12r00r00         [24]  898 	lcall	_dataout
                           000064   899 	C$characters.c$53$3_0$47 ==.
                                    900 ;	characters.c:53: printf_tiny("Allocating a new buffer\r\n");
      000064 74r00            [12]  901 	mov	a,#___str_0
      000066 C0 E0            [24]  902 	push	acc
      000068 74s00            [12]  903 	mov	a,#(___str_0 >> 8)
      00006A C0 E0            [24]  904 	push	acc
      00006C 12r00r00         [24]  905 	lcall	_printf_tiny
      00006F 15 81            [12]  906 	dec	sp
      000071 15 81            [12]  907 	dec	sp
                           000073   908 	C$characters.c$55$3_0$47 ==.
                                    909 ;	characters.c:55: heap2 = getinp_30_300(); // values between 30 and 300 are accepted
      000073 12r00r00         [24]  910 	lcall	_getinp_30_300
      000076 AE 82            [24]  911 	mov	r6,dpl
      000078 AF 83            [24]  912 	mov	r7,dph
      00007A 90r00r6C         [24]  913 	mov	dptr,#_enter_characters_heap2_65536_45
      00007D EE               [12]  914 	mov	a,r6
      00007E F0               [24]  915 	movx	@dptr,a
      00007F EF               [12]  916 	mov	a,r7
      000080 A3               [24]  917 	inc	dptr
      000081 F0               [24]  918 	movx	@dptr,a
                           000082   919 	C$characters.c$57$3_0$47 ==.
                                    920 ;	characters.c:57: buffer_n[array_n] = (char*)malloc(heap2); // allocating new buffer with memory
      000082 90r00r6E         [24]  921 	mov	dptr,#_enter_characters_array_n_65536_45
      000085 E0               [24]  922 	movx	a,@dptr
      000086 FC               [12]  923 	mov	r4,a
      000087 A3               [24]  924 	inc	dptr
      000088 E0               [24]  925 	movx	a,@dptr
      000089 FD               [12]  926 	mov	r5,a
      00008A EC               [12]  927 	mov	a,r4
      00008B 2C               [12]  928 	add	a,r4
      00008C FC               [12]  929 	mov	r4,a
      00008D ED               [12]  930 	mov	a,r5
      00008E 33               [12]  931 	rlc	a
      00008F FD               [12]  932 	mov	r5,a
      000090 EC               [12]  933 	mov	a,r4
      000091 24r00            [12]  934 	add	a,#_buffer_n
      000093 FC               [12]  935 	mov	r4,a
      000094 ED               [12]  936 	mov	a,r5
      000095 34s00            [12]  937 	addc	a,#(_buffer_n >> 8)
      000097 FD               [12]  938 	mov	r5,a
      000098 8E 82            [24]  939 	mov	dpl,r6
      00009A 8F 83            [24]  940 	mov	dph,r7
      00009C C0 05            [24]  941 	push	ar5
      00009E C0 04            [24]  942 	push	ar4
      0000A0 12r00r00         [24]  943 	lcall	_malloc
      0000A3 AE 82            [24]  944 	mov	r6,dpl
      0000A5 AF 83            [24]  945 	mov	r7,dph
      0000A7 D0 04            [24]  946 	pop	ar4
      0000A9 D0 05            [24]  947 	pop	ar5
      0000AB 8C 82            [24]  948 	mov	dpl,r4
      0000AD 8D 83            [24]  949 	mov	dph,r5
      0000AF EE               [12]  950 	mov	a,r6
      0000B0 F0               [24]  951 	movx	@dptr,a
      0000B1 EF               [12]  952 	mov	a,r7
      0000B2 A3               [24]  953 	inc	dptr
      0000B3 F0               [24]  954 	movx	@dptr,a
                           0000B4   955 	C$characters.c$61$3_0$47 ==.
                                    956 ;	characters.c:61: if(buffer_n[array_n]== NULL)
      0000B4 90r00r6E         [24]  957 	mov	dptr,#_enter_characters_array_n_65536_45
      0000B7 E0               [24]  958 	movx	a,@dptr
      0000B8 FE               [12]  959 	mov	r6,a
      0000B9 A3               [24]  960 	inc	dptr
      0000BA E0               [24]  961 	movx	a,@dptr
      0000BB FF               [12]  962 	mov	r7,a
      0000BC EE               [12]  963 	mov	a,r6
      0000BD 2E               [12]  964 	add	a,r6
      0000BE FC               [12]  965 	mov	r4,a
      0000BF EF               [12]  966 	mov	a,r7
      0000C0 33               [12]  967 	rlc	a
      0000C1 FD               [12]  968 	mov	r5,a
      0000C2 EC               [12]  969 	mov	a,r4
      0000C3 24r00            [12]  970 	add	a,#_buffer_n
      0000C5 F5 82            [12]  971 	mov	dpl,a
      0000C7 ED               [12]  972 	mov	a,r5
      0000C8 34s00            [12]  973 	addc	a,#(_buffer_n >> 8)
      0000CA F5 83            [12]  974 	mov	dph,a
      0000CC E0               [24]  975 	movx	a,@dptr
      0000CD FC               [12]  976 	mov	r4,a
      0000CE A3               [24]  977 	inc	dptr
      0000CF E0               [24]  978 	movx	a,@dptr
      0000D0 4C               [12]  979 	orl	a,r4
      0000D1 70 12            [24]  980 	jnz	00103$
                           0000D3   981 	C$characters.c$63$4_0$48 ==.
                                    982 ;	characters.c:63: printf_tiny("\n\r Memory Allocation for Buffer %d Failed \n\r Press '+' to Try again \n\r");
      0000D3 74r1A            [12]  983 	mov	a,#___str_1
      0000D5 C0 E0            [24]  984 	push	acc
      0000D7 74s00            [12]  985 	mov	a,#(___str_1 >> 8)
      0000D9 C0 E0            [24]  986 	push	acc
      0000DB 12r00r00         [24]  987 	lcall	_printf_tiny
      0000DE 15 81            [12]  988 	dec	sp
      0000E0 15 81            [12]  989 	dec	sp
      0000E2 02r08r1B         [24]  990 	ljmp	00150$
      0000E5                        991 00103$:
                           0000E5   992 	C$characters.c$67$4_0$49 ==.
                                    993 ;	characters.c:67: printf_tiny("\n\rMemory Allocation Successful for Buffer %d \n\r",(array_n + 2));
      0000E5 74 02            [12]  994 	mov	a,#0x02
      0000E7 2E               [12]  995 	add	a,r6
      0000E8 FE               [12]  996 	mov	r6,a
      0000E9 E4               [12]  997 	clr	a
      0000EA 3F               [12]  998 	addc	a,r7
      0000EB FF               [12]  999 	mov	r7,a
      0000EC C0 06            [24] 1000 	push	ar6
      0000EE C0 07            [24] 1001 	push	ar7
      0000F0 74r61            [12] 1002 	mov	a,#___str_2
      0000F2 C0 E0            [24] 1003 	push	acc
      0000F4 74s00            [12] 1004 	mov	a,#(___str_2 >> 8)
      0000F6 C0 E0            [24] 1005 	push	acc
      0000F8 12r00r00         [24] 1006 	lcall	_printf_tiny
      0000FB E5 81            [12] 1007 	mov	a,sp
      0000FD 24 FC            [12] 1008 	add	a,#0xfc
      0000FF F5 81            [12] 1009 	mov	sp,a
                           000101  1010 	C$characters.c$68$4_0$49 ==.
                                   1011 ;	characters.c:68: printf_tiny("\n\rBuffer %d allocated of size %d \n\r",(array_n + 2), heap2);
      000101 90r00r6E         [24] 1012 	mov	dptr,#_enter_characters_array_n_65536_45
      000104 E0               [24] 1013 	movx	a,@dptr
      000105 FE               [12] 1014 	mov	r6,a
      000106 A3               [24] 1015 	inc	dptr
      000107 E0               [24] 1016 	movx	a,@dptr
      000108 FF               [12] 1017 	mov	r7,a
      000109 74 02            [12] 1018 	mov	a,#0x02
      00010B 2E               [12] 1019 	add	a,r6
      00010C FE               [12] 1020 	mov	r6,a
      00010D E4               [12] 1021 	clr	a
      00010E 3F               [12] 1022 	addc	a,r7
      00010F FF               [12] 1023 	mov	r7,a
      000110 90r00r6C         [24] 1024 	mov	dptr,#_enter_characters_heap2_65536_45
      000113 E0               [24] 1025 	movx	a,@dptr
      000114 C0 E0            [24] 1026 	push	acc
      000116 A3               [24] 1027 	inc	dptr
      000117 E0               [24] 1028 	movx	a,@dptr
      000118 C0 E0            [24] 1029 	push	acc
      00011A C0 06            [24] 1030 	push	ar6
      00011C C0 07            [24] 1031 	push	ar7
      00011E 74r91            [12] 1032 	mov	a,#___str_3
      000120 C0 E0            [24] 1033 	push	acc
      000122 74s00            [12] 1034 	mov	a,#(___str_3 >> 8)
      000124 C0 E0            [24] 1035 	push	acc
      000126 12r00r00         [24] 1036 	lcall	_printf_tiny
      000129 E5 81            [12] 1037 	mov	a,sp
      00012B 24 FA            [12] 1038 	add	a,#0xfa
      00012D F5 81            [12] 1039 	mov	sp,a
                           00012F  1040 	C$characters.c$69$4_0$49 ==.
                                   1041 ;	characters.c:69: printf_tiny("\n\rAddress of buffer %d is 0x%x \n\r",(array_n + 2),(uint16_t)(buffer_n[i]));
      00012F 90r00r70         [24] 1042 	mov	dptr,#_enter_characters_i_65536_45
      000132 E0               [24] 1043 	movx	a,@dptr
      000133 FE               [12] 1044 	mov	r6,a
      000134 A3               [24] 1045 	inc	dptr
      000135 E0               [24] 1046 	movx	a,@dptr
      000136 FF               [12] 1047 	mov	r7,a
      000137 EE               [12] 1048 	mov	a,r6
      000138 2E               [12] 1049 	add	a,r6
      000139 FE               [12] 1050 	mov	r6,a
      00013A EF               [12] 1051 	mov	a,r7
      00013B 33               [12] 1052 	rlc	a
      00013C FF               [12] 1053 	mov	r7,a
      00013D EE               [12] 1054 	mov	a,r6
      00013E 24r00            [12] 1055 	add	a,#_buffer_n
      000140 F5 82            [12] 1056 	mov	dpl,a
      000142 EF               [12] 1057 	mov	a,r7
      000143 34s00            [12] 1058 	addc	a,#(_buffer_n >> 8)
      000145 F5 83            [12] 1059 	mov	dph,a
      000147 E0               [24] 1060 	movx	a,@dptr
      000148 FE               [12] 1061 	mov	r6,a
      000149 A3               [24] 1062 	inc	dptr
      00014A E0               [24] 1063 	movx	a,@dptr
      00014B FF               [12] 1064 	mov	r7,a
      00014C 90r00r6E         [24] 1065 	mov	dptr,#_enter_characters_array_n_65536_45
      00014F E0               [24] 1066 	movx	a,@dptr
      000150 FC               [12] 1067 	mov	r4,a
      000151 A3               [24] 1068 	inc	dptr
      000152 E0               [24] 1069 	movx	a,@dptr
      000153 FD               [12] 1070 	mov	r5,a
      000154 74 02            [12] 1071 	mov	a,#0x02
      000156 2C               [12] 1072 	add	a,r4
      000157 FC               [12] 1073 	mov	r4,a
      000158 E4               [12] 1074 	clr	a
      000159 3D               [12] 1075 	addc	a,r5
      00015A FD               [12] 1076 	mov	r5,a
      00015B C0 06            [24] 1077 	push	ar6
      00015D C0 07            [24] 1078 	push	ar7
      00015F C0 04            [24] 1079 	push	ar4
      000161 C0 05            [24] 1080 	push	ar5
      000163 74rB5            [12] 1081 	mov	a,#___str_4
      000165 C0 E0            [24] 1082 	push	acc
      000167 74s00            [12] 1083 	mov	a,#(___str_4 >> 8)
      000169 C0 E0            [24] 1084 	push	acc
      00016B 12r00r00         [24] 1085 	lcall	_printf_tiny
      00016E E5 81            [12] 1086 	mov	a,sp
      000170 24 FA            [12] 1087 	add	a,#0xfa
      000172 F5 81            [12] 1088 	mov	sp,a
                           000174  1089 	C$characters.c$70$4_0$49 ==.
                                   1090 ;	characters.c:70: buff_size[buff_n] = heap2;  //store size of newly allocated buffer to buff_size array
      000174 90r00r72         [24] 1091 	mov	dptr,#_enter_characters_buff_n_65536_45
      000177 E0               [24] 1092 	movx	a,@dptr
      000178 FE               [12] 1093 	mov	r6,a
      000179 A3               [24] 1094 	inc	dptr
      00017A E0               [24] 1095 	movx	a,@dptr
      00017B FF               [12] 1096 	mov	r7,a
      00017C EE               [12] 1097 	mov	a,r6
      00017D 2E               [12] 1098 	add	a,r6
      00017E FE               [12] 1099 	mov	r6,a
      00017F EF               [12] 1100 	mov	a,r7
      000180 33               [12] 1101 	rlc	a
      000181 FF               [12] 1102 	mov	r7,a
      000182 EE               [12] 1103 	mov	a,r6
      000183 24r04            [12] 1104 	add	a,#_enter_characters_buff_size_65536_45
      000185 FE               [12] 1105 	mov	r6,a
      000186 EF               [12] 1106 	mov	a,r7
      000187 34s00            [12] 1107 	addc	a,#(_enter_characters_buff_size_65536_45 >> 8)
      000189 FF               [12] 1108 	mov	r7,a
      00018A 90r00r6C         [24] 1109 	mov	dptr,#_enter_characters_heap2_65536_45
      00018D E0               [24] 1110 	movx	a,@dptr
      00018E FC               [12] 1111 	mov	r4,a
      00018F A3               [24] 1112 	inc	dptr
      000190 E0               [24] 1113 	movx	a,@dptr
      000191 FD               [12] 1114 	mov	r5,a
      000192 8E 82            [24] 1115 	mov	dpl,r6
      000194 8F 83            [24] 1116 	mov	dph,r7
      000196 EC               [12] 1117 	mov	a,r4
      000197 F0               [24] 1118 	movx	@dptr,a
      000198 ED               [12] 1119 	mov	a,r5
      000199 A3               [24] 1120 	inc	dptr
      00019A F0               [24] 1121 	movx	@dptr,a
                           00019B  1122 	C$characters.c$71$4_0$49 ==.
                                   1123 ;	characters.c:71: buff_n++;//increments the buffer from 2
      00019B 90r00r72         [24] 1124 	mov	dptr,#_enter_characters_buff_n_65536_45
      00019E E0               [24] 1125 	movx	a,@dptr
      00019F 24 01            [12] 1126 	add	a,#0x01
      0001A1 F0               [24] 1127 	movx	@dptr,a
      0001A2 A3               [24] 1128 	inc	dptr
      0001A3 E0               [24] 1129 	movx	a,@dptr
      0001A4 34 00            [12] 1130 	addc	a,#0x00
      0001A6 F0               [24] 1131 	movx	@dptr,a
                           0001A7  1132 	C$characters.c$72$4_0$49 ==.
                                   1133 ;	characters.c:72: array_n++;//increments the input buffer count
      0001A7 90r00r6E         [24] 1134 	mov	dptr,#_enter_characters_array_n_65536_45
      0001AA E0               [24] 1135 	movx	a,@dptr
      0001AB 24 01            [12] 1136 	add	a,#0x01
      0001AD F0               [24] 1137 	movx	@dptr,a
      0001AE A3               [24] 1138 	inc	dptr
      0001AF E0               [24] 1139 	movx	a,@dptr
      0001B0 34 00            [12] 1140 	addc	a,#0x00
      0001B2 F0               [24] 1141 	movx	@dptr,a
                           0001B3  1142 	C$characters.c$74$3_0$47 ==.
                                   1143 ;	characters.c:74: break;
      0001B3 02r08r1B         [24] 1144 	ljmp	00150$
                           0001B6  1145 	C$characters.c$77$2_0$46 ==.
                                   1146 ;	characters.c:77: case '-':
      0001B6                       1147 00105$:
                           0001B6  1148 	C$characters.c$79$3_0$50 ==.
                                   1149 ;	characters.c:79: DEBUGPORT(0x53);
      0001B6 90 00 53         [24] 1150 	mov	dptr,#0x0053
      0001B9 12r00r00         [24] 1151 	lcall	_dataout
                           0001BC  1152 	C$characters.c$80$3_0$50 ==.
                                   1153 ;	characters.c:80: printf_tiny("Please enter the number of buffer to delete");
      0001BC 74rD7            [12] 1154 	mov	a,#___str_5
      0001BE C0 E0            [24] 1155 	push	acc
      0001C0 74s00            [12] 1156 	mov	a,#(___str_5 >> 8)
      0001C2 C0 E0            [24] 1157 	push	acc
      0001C4 12r00r00         [24] 1158 	lcall	_printf_tiny
      0001C7 15 81            [12] 1159 	dec	sp
      0001C9 15 81            [12] 1160 	dec	sp
                           0001CB  1161 	C$characters.c$82$3_0$50 ==.
                                   1162 ;	characters.c:82: buff_del = del_buff(); //Delete buffer function is called
      0001CB 12r00r00         [24] 1163 	lcall	_del_buff
      0001CE AE 82            [24] 1164 	mov	r6,dpl
      0001D0 AF 83            [24] 1165 	mov	r7,dph
      0001D2 90r00r6A         [24] 1166 	mov	dptr,#_enter_characters_buff_del_65536_45
      0001D5 EE               [12] 1167 	mov	a,r6
      0001D6 F0               [24] 1168 	movx	@dptr,a
      0001D7 EF               [12] 1169 	mov	a,r7
      0001D8 A3               [24] 1170 	inc	dptr
      0001D9 F0               [24] 1171 	movx	@dptr,a
                           0001DA  1172 	C$characters.c$84$3_0$50 ==.
                                   1173 ;	characters.c:84: if(buff_del == 0)
      0001DA EE               [12] 1174 	mov	a,r6
      0001DB 4F               [12] 1175 	orl	a,r7
      0001DC 70 12            [24] 1176 	jnz	00114$
                           0001DE  1177 	C$characters.c$86$4_0$51 ==.
                                   1178 ;	characters.c:86: printf_tiny("\n\r Sorry, Buffer 0 cannot be deleted!\n\r");
      0001DE 74r03            [12] 1179 	mov	a,#___str_6
      0001E0 C0 E0            [24] 1180 	push	acc
      0001E2 74s01            [12] 1181 	mov	a,#(___str_6 >> 8)
      0001E4 C0 E0            [24] 1182 	push	acc
      0001E6 12r00r00         [24] 1183 	lcall	_printf_tiny
      0001E9 15 81            [12] 1184 	dec	sp
      0001EB 15 81            [12] 1185 	dec	sp
      0001ED 02r08r1B         [24] 1186 	ljmp	00150$
      0001F0                       1187 00114$:
                           0001F0  1188 	C$characters.c$88$3_0$50 ==.
                                   1189 ;	characters.c:88: else if(buff_del == 1)
      0001F0 BE 01 4C         [24] 1190 	cjne	r6,#0x01,00111$
      0001F3 BF 00 49         [24] 1191 	cjne	r7,#0x00,00111$
                           0001F6  1192 	C$characters.c$90$4_0$52 ==.
                                   1193 ;	characters.c:90: free(buffer_1);
      0001F6 90r00r00         [24] 1194 	mov	dptr,#_buffer_1
      0001F9 E0               [24] 1195 	movx	a,@dptr
      0001FA FC               [12] 1196 	mov	r4,a
      0001FB A3               [24] 1197 	inc	dptr
      0001FC E0               [24] 1198 	movx	a,@dptr
      0001FD FD               [12] 1199 	mov	r5,a
      0001FE 7B 00            [12] 1200 	mov	r3,#0x00
      000200 8C 82            [24] 1201 	mov	dpl,r4
      000202 8D 83            [24] 1202 	mov	dph,r5
      000204 8B F0            [24] 1203 	mov	b,r3
      000206 12r00r00         [24] 1204 	lcall	_free
                           000209  1205 	C$characters.c$91$4_0$52 ==.
                                   1206 ;	characters.c:91: printf_tiny("\n\r Buffer 1> %d\n\r",(unsigned int)buffer_1);
      000209 90r00r00         [24] 1207 	mov	dptr,#_buffer_1
      00020C E0               [24] 1208 	movx	a,@dptr
      00020D FC               [12] 1209 	mov	r4,a
      00020E A3               [24] 1210 	inc	dptr
      00020F E0               [24] 1211 	movx	a,@dptr
      000210 FD               [12] 1212 	mov	r5,a
      000211 C0 04            [24] 1213 	push	ar4
      000213 C0 05            [24] 1214 	push	ar5
      000215 74r2B            [12] 1215 	mov	a,#___str_7
      000217 C0 E0            [24] 1216 	push	acc
      000219 74s01            [12] 1217 	mov	a,#(___str_7 >> 8)
      00021B C0 E0            [24] 1218 	push	acc
      00021D 12r00r00         [24] 1219 	lcall	_printf_tiny
      000220 E5 81            [12] 1220 	mov	a,sp
      000222 24 FC            [12] 1221 	add	a,#0xfc
      000224 F5 81            [12] 1222 	mov	sp,a
                           000226  1223 	C$characters.c$92$4_0$52 ==.
                                   1224 ;	characters.c:92: buffer_1 = 0;
      000226 90r00r00         [24] 1225 	mov	dptr,#_buffer_1
      000229 E4               [12] 1226 	clr	a
      00022A F0               [24] 1227 	movx	@dptr,a
      00022B A3               [24] 1228 	inc	dptr
      00022C F0               [24] 1229 	movx	@dptr,a
                           00022D  1230 	C$characters.c$93$4_0$52 ==.
                                   1231 ;	characters.c:93: printf_tiny("Buffer 1 deleted.\r\n");
      00022D 74r3D            [12] 1232 	mov	a,#___str_8
      00022F C0 E0            [24] 1233 	push	acc
      000231 74s01            [12] 1234 	mov	a,#(___str_8 >> 8)
      000233 C0 E0            [24] 1235 	push	acc
      000235 12r00r00         [24] 1236 	lcall	_printf_tiny
      000238 15 81            [12] 1237 	dec	sp
      00023A 15 81            [12] 1238 	dec	sp
      00023C 02r08r1B         [24] 1239 	ljmp	00150$
      00023F                       1240 00111$:
                           00023F  1241 	C$characters.c$95$3_0$50 ==.
                                   1242 ;	characters.c:95: else if(((buff_del>1))&&(buff_del<=(array_n+2)))
      00023F 8E 04            [24] 1243 	mov	ar4,r6
      000241 8F 05            [24] 1244 	mov	ar5,r7
      000243 C3               [12] 1245 	clr	c
      000244 74 01            [12] 1246 	mov	a,#0x01
      000246 9C               [12] 1247 	subb	a,r4
      000247 74 80            [12] 1248 	mov	a,#(0x00 ^ 0x80)
      000249 8D F0            [24] 1249 	mov	b,r5
      00024B 63 F0 80         [24] 1250 	xrl	b,#0x80
      00024E 95 F0            [12] 1251 	subb	a,b
      000250 40 03            [24] 1252 	jc	00250$
      000252 02r03r1E         [24] 1253 	ljmp	00107$
      000255                       1254 00250$:
      000255 90r00r6E         [24] 1255 	mov	dptr,#_enter_characters_array_n_65536_45
      000258 E0               [24] 1256 	movx	a,@dptr
      000259 FC               [12] 1257 	mov	r4,a
      00025A A3               [24] 1258 	inc	dptr
      00025B E0               [24] 1259 	movx	a,@dptr
      00025C FD               [12] 1260 	mov	r5,a
      00025D 74 02            [12] 1261 	mov	a,#0x02
      00025F 2C               [12] 1262 	add	a,r4
      000260 FC               [12] 1263 	mov	r4,a
      000261 E4               [12] 1264 	clr	a
      000262 3D               [12] 1265 	addc	a,r5
      000263 FD               [12] 1266 	mov	r5,a
      000264 8E 02            [24] 1267 	mov	ar2,r6
      000266 8F 03            [24] 1268 	mov	ar3,r7
      000268 C3               [12] 1269 	clr	c
      000269 EC               [12] 1270 	mov	a,r4
      00026A 9A               [12] 1271 	subb	a,r2
      00026B ED               [12] 1272 	mov	a,r5
      00026C 64 80            [12] 1273 	xrl	a,#0x80
      00026E 8B F0            [24] 1274 	mov	b,r3
      000270 63 F0 80         [24] 1275 	xrl	b,#0x80
      000273 95 F0            [12] 1276 	subb	a,b
      000275 50 03            [24] 1277 	jnc	00251$
      000277 02r03r1E         [24] 1278 	ljmp	00107$
      00027A                       1279 00251$:
                           00027A  1280 	C$characters.c$97$4_0$53 ==.
                                   1281 ;	characters.c:97: printf_tiny("\n\r Deleting buffer %d in progress\n\r",buff_del);
      00027A C0 06            [24] 1282 	push	ar6
      00027C C0 07            [24] 1283 	push	ar7
      00027E 74r51            [12] 1284 	mov	a,#___str_9
      000280 C0 E0            [24] 1285 	push	acc
      000282 74s01            [12] 1286 	mov	a,#(___str_9 >> 8)
      000284 C0 E0            [24] 1287 	push	acc
      000286 12r00r00         [24] 1288 	lcall	_printf_tiny
      000289 E5 81            [12] 1289 	mov	a,sp
      00028B 24 FC            [12] 1290 	add	a,#0xfc
      00028D F5 81            [12] 1291 	mov	sp,a
                           00028F  1292 	C$characters.c$98$4_0$53 ==.
                                   1293 ;	characters.c:98: free(buffer_n[buff_del-2]); //frees the respective buffer
      00028F 90r00r6A         [24] 1294 	mov	dptr,#_enter_characters_buff_del_65536_45
      000292 E0               [24] 1295 	movx	a,@dptr
      000293 FE               [12] 1296 	mov	r6,a
      000294 A3               [24] 1297 	inc	dptr
      000295 E0               [24] 1298 	movx	a,@dptr
      000296 1E               [12] 1299 	dec	r6
      000297 1E               [12] 1300 	dec	r6
      000298 C2 D5            [12] 1301 	clr	F0
      00029A 75 F0 02         [24] 1302 	mov	b,#0x02
      00029D EE               [12] 1303 	mov	a,r6
      00029E 30 E7 04         [24] 1304 	jnb	acc.7,00252$
      0002A1 B2 D5            [12] 1305 	cpl	F0
      0002A3 F4               [12] 1306 	cpl	a
      0002A4 04               [12] 1307 	inc	a
      0002A5                       1308 00252$:
      0002A5 A4               [48] 1309 	mul	ab
      0002A6 30 D5 0A         [24] 1310 	jnb	F0,00253$
      0002A9 F4               [12] 1311 	cpl	a
      0002AA 24 01            [12] 1312 	add	a,#0x01
      0002AC C5 F0            [12] 1313 	xch	a,b
      0002AE F4               [12] 1314 	cpl	a
      0002AF 34 00            [12] 1315 	addc	a,#0x00
      0002B1 C5 F0            [12] 1316 	xch	a,b
      0002B3                       1317 00253$:
      0002B3 24r00            [12] 1318 	add	a,#_buffer_n
      0002B5 F5 82            [12] 1319 	mov	dpl,a
      0002B7 74s00            [12] 1320 	mov	a,#(_buffer_n >> 8)
      0002B9 35 F0            [12] 1321 	addc	a,b
      0002BB F5 83            [12] 1322 	mov	dph,a
      0002BD E0               [24] 1323 	movx	a,@dptr
      0002BE FE               [12] 1324 	mov	r6,a
      0002BF A3               [24] 1325 	inc	dptr
      0002C0 E0               [24] 1326 	movx	a,@dptr
      0002C1 FF               [12] 1327 	mov	r7,a
      0002C2 7D 00            [12] 1328 	mov	r5,#0x00
      0002C4 8E 82            [24] 1329 	mov	dpl,r6
      0002C6 8F 83            [24] 1330 	mov	dph,r7
      0002C8 8D F0            [24] 1331 	mov	b,r5
      0002CA 12r00r00         [24] 1332 	lcall	_free
                           0002CD  1333 	C$characters.c$99$4_0$53 ==.
                                   1334 ;	characters.c:99: printf_tiny("\n\r Buffer %d is free\n\r",buff_del);
      0002CD 90r00r6A         [24] 1335 	mov	dptr,#_enter_characters_buff_del_65536_45
      0002D0 E0               [24] 1336 	movx	a,@dptr
      0002D1 C0 E0            [24] 1337 	push	acc
      0002D3 A3               [24] 1338 	inc	dptr
      0002D4 E0               [24] 1339 	movx	a,@dptr
      0002D5 C0 E0            [24] 1340 	push	acc
      0002D7 74r75            [12] 1341 	mov	a,#___str_10
      0002D9 C0 E0            [24] 1342 	push	acc
      0002DB 74s01            [12] 1343 	mov	a,#(___str_10 >> 8)
      0002DD C0 E0            [24] 1344 	push	acc
      0002DF 12r00r00         [24] 1345 	lcall	_printf_tiny
      0002E2 E5 81            [12] 1346 	mov	a,sp
      0002E4 24 FC            [12] 1347 	add	a,#0xfc
      0002E6 F5 81            [12] 1348 	mov	sp,a
                           0002E8  1349 	C$characters.c$100$4_0$53 ==.
                                   1350 ;	characters.c:100: buffer_n[buff_del-2]=0; //nulls the buffer
      0002E8 90r00r6A         [24] 1351 	mov	dptr,#_enter_characters_buff_del_65536_45
      0002EB E0               [24] 1352 	movx	a,@dptr
      0002EC FE               [12] 1353 	mov	r6,a
      0002ED A3               [24] 1354 	inc	dptr
      0002EE E0               [24] 1355 	movx	a,@dptr
      0002EF FF               [12] 1356 	mov	r7,a
      0002F0 1E               [12] 1357 	dec	r6
      0002F1 1E               [12] 1358 	dec	r6
      0002F2 C2 D5            [12] 1359 	clr	F0
      0002F4 75 F0 02         [24] 1360 	mov	b,#0x02
      0002F7 EE               [12] 1361 	mov	a,r6
      0002F8 30 E7 04         [24] 1362 	jnb	acc.7,00254$
      0002FB B2 D5            [12] 1363 	cpl	F0
      0002FD F4               [12] 1364 	cpl	a
      0002FE 04               [12] 1365 	inc	a
      0002FF                       1366 00254$:
      0002FF A4               [48] 1367 	mul	ab
      000300 30 D5 0A         [24] 1368 	jnb	F0,00255$
      000303 F4               [12] 1369 	cpl	a
      000304 24 01            [12] 1370 	add	a,#0x01
      000306 C5 F0            [12] 1371 	xch	a,b
      000308 F4               [12] 1372 	cpl	a
      000309 34 00            [12] 1373 	addc	a,#0x00
      00030B C5 F0            [12] 1374 	xch	a,b
      00030D                       1375 00255$:
      00030D 24r00            [12] 1376 	add	a,#_buffer_n
      00030F F5 82            [12] 1377 	mov	dpl,a
      000311 74s00            [12] 1378 	mov	a,#(_buffer_n >> 8)
      000313 35 F0            [12] 1379 	addc	a,b
      000315 F5 83            [12] 1380 	mov	dph,a
      000317 E4               [12] 1381 	clr	a
      000318 F0               [24] 1382 	movx	@dptr,a
      000319 A3               [24] 1383 	inc	dptr
      00031A F0               [24] 1384 	movx	@dptr,a
      00031B 02r08r1B         [24] 1385 	ljmp	00150$
      00031E                       1386 00107$:
                           00031E  1387 	C$characters.c$104$4_0$54 ==.
                                   1388 ;	characters.c:104: printf_tiny("\n\rEnter a valid buffer number\n\r Press '-' to delete any valid buffer\n\r");
      00031E 74r8C            [12] 1389 	mov	a,#___str_11
      000320 C0 E0            [24] 1390 	push	acc
      000322 74s01            [12] 1391 	mov	a,#(___str_11 >> 8)
      000324 C0 E0            [24] 1392 	push	acc
      000326 12r00r00         [24] 1393 	lcall	_printf_tiny
      000329 15 81            [12] 1394 	dec	sp
      00032B 15 81            [12] 1395 	dec	sp
                           00032D  1396 	C$characters.c$106$3_0$50 ==.
                                   1397 ;	characters.c:106: break;
      00032D 02r08r1B         [24] 1398 	ljmp	00150$
                           000330  1399 	C$characters.c$109$2_0$46 ==.
                                   1400 ;	characters.c:109: case '?':
      000330                       1401 00116$:
                           000330  1402 	C$characters.c$111$3_0$55 ==.
                                   1403 ;	characters.c:111: DEBUGPORT(0x54);
      000330 90 00 54         [24] 1404 	mov	dptr,#0x0054
      000333 12r00r00         [24] 1405 	lcall	_dataout
                           000336  1406 	C$characters.c$112$3_0$55 ==.
                                   1407 ;	characters.c:112: if (buffer_0 != NULL){
      000336 90r00r00         [24] 1408 	mov	dptr,#_buffer_0
      000339 E0               [24] 1409 	movx	a,@dptr
      00033A F5 F0            [12] 1410 	mov	b,a
      00033C A3               [24] 1411 	inc	dptr
      00033D E0               [24] 1412 	movx	a,@dptr
      00033E 45 F0            [12] 1413 	orl	a,b
      000340 70 03            [24] 1414 	jnz	00256$
      000342 02r03rFE         [24] 1415 	ljmp	00118$
      000345                       1416 00256$:
                           000345  1417 	C$characters.c$113$4_0$56 ==.
                                   1418 ;	characters.c:113: printf_tiny("\n\r <<<<<<HEAP REPORT of Buffer_0>>>>>> \r\n");
      000345 74rD3            [12] 1419 	mov	a,#___str_12
      000347 C0 E0            [24] 1420 	push	acc
      000349 74s01            [12] 1421 	mov	a,#(___str_12 >> 8)
      00034B C0 E0            [24] 1422 	push	acc
      00034D 12r00r00         [24] 1423 	lcall	_printf_tiny
      000350 15 81            [12] 1424 	dec	sp
      000352 15 81            [12] 1425 	dec	sp
                           000354  1426 	C$characters.c$114$4_0$56 ==.
                                   1427 ;	characters.c:114: printf_tiny("\n\rStarting Address of Buffer_0 is 0x%x\n\r", buffer_0_address);
      000354 90r00r00         [24] 1428 	mov	dptr,#_buffer_0_address
      000357 E0               [24] 1429 	movx	a,@dptr
      000358 C0 E0            [24] 1430 	push	acc
      00035A A3               [24] 1431 	inc	dptr
      00035B E0               [24] 1432 	movx	a,@dptr
      00035C C0 E0            [24] 1433 	push	acc
      00035E 74rFD            [12] 1434 	mov	a,#___str_13
      000360 C0 E0            [24] 1435 	push	acc
      000362 74s01            [12] 1436 	mov	a,#(___str_13 >> 8)
      000364 C0 E0            [24] 1437 	push	acc
      000366 12r00r00         [24] 1438 	lcall	_printf_tiny
      000369 E5 81            [12] 1439 	mov	a,sp
      00036B 24 FC            [12] 1440 	add	a,#0xfc
      00036D F5 81            [12] 1441 	mov	sp,a
                           00036F  1442 	C$characters.c$115$4_0$56 ==.
                                   1443 ;	characters.c:115: printf_tiny("\n\rEnding Address of Buffer_0 is 0x%x\n\r",(buffer_0_address)+(heap1));
      00036F 90r00r00         [24] 1444 	mov	dptr,#_heap1
      000372 E0               [24] 1445 	movx	a,@dptr
      000373 FE               [12] 1446 	mov	r6,a
      000374 A3               [24] 1447 	inc	dptr
      000375 E0               [24] 1448 	movx	a,@dptr
      000376 FF               [12] 1449 	mov	r7,a
      000377 90r00r00         [24] 1450 	mov	dptr,#_buffer_0_address
      00037A E0               [24] 1451 	movx	a,@dptr
      00037B FC               [12] 1452 	mov	r4,a
      00037C A3               [24] 1453 	inc	dptr
      00037D E0               [24] 1454 	movx	a,@dptr
      00037E FD               [12] 1455 	mov	r5,a
      00037F EE               [12] 1456 	mov	a,r6
      000380 2C               [12] 1457 	add	a,r4
      000381 FE               [12] 1458 	mov	r6,a
      000382 EF               [12] 1459 	mov	a,r7
      000383 3D               [12] 1460 	addc	a,r5
      000384 FF               [12] 1461 	mov	r7,a
      000385 C0 06            [24] 1462 	push	ar6
      000387 C0 07            [24] 1463 	push	ar7
      000389 74r26            [12] 1464 	mov	a,#___str_14
      00038B C0 E0            [24] 1465 	push	acc
      00038D 74s02            [12] 1466 	mov	a,#(___str_14 >> 8)
      00038F C0 E0            [24] 1467 	push	acc
      000391 12r00r00         [24] 1468 	lcall	_printf_tiny
      000394 E5 81            [12] 1469 	mov	a,sp
      000396 24 FC            [12] 1470 	add	a,#0xfc
      000398 F5 81            [12] 1471 	mov	sp,a
                           00039A  1472 	C$characters.c$116$4_0$56 ==.
                                   1473 ;	characters.c:116: printf_tiny("\n\rBuffer Size of Buffer_0 %d\n\r",heap1);
      00039A 90r00r00         [24] 1474 	mov	dptr,#_heap1
      00039D E0               [24] 1475 	movx	a,@dptr
      00039E C0 E0            [24] 1476 	push	acc
      0003A0 A3               [24] 1477 	inc	dptr
      0003A1 E0               [24] 1478 	movx	a,@dptr
      0003A2 C0 E0            [24] 1479 	push	acc
      0003A4 74r4D            [12] 1480 	mov	a,#___str_15
      0003A6 C0 E0            [24] 1481 	push	acc
      0003A8 74s02            [12] 1482 	mov	a,#(___str_15 >> 8)
      0003AA C0 E0            [24] 1483 	push	acc
      0003AC 12r00r00         [24] 1484 	lcall	_printf_tiny
      0003AF E5 81            [12] 1485 	mov	a,sp
      0003B1 24 FC            [12] 1486 	add	a,#0xfc
      0003B3 F5 81            [12] 1487 	mov	sp,a
                           0003B5  1488 	C$characters.c$117$4_0$56 ==.
                                   1489 ;	characters.c:117: printf_tiny("\n\rStored characters in buffer = %d\n\r",storage);
      0003B5 90r00r00         [24] 1490 	mov	dptr,#_storage
      0003B8 E0               [24] 1491 	movx	a,@dptr
      0003B9 C0 E0            [24] 1492 	push	acc
      0003BB A3               [24] 1493 	inc	dptr
      0003BC E0               [24] 1494 	movx	a,@dptr
      0003BD C0 E0            [24] 1495 	push	acc
      0003BF 74r6C            [12] 1496 	mov	a,#___str_16
      0003C1 C0 E0            [24] 1497 	push	acc
      0003C3 74s02            [12] 1498 	mov	a,#(___str_16 >> 8)
      0003C5 C0 E0            [24] 1499 	push	acc
      0003C7 12r00r00         [24] 1500 	lcall	_printf_tiny
      0003CA E5 81            [12] 1501 	mov	a,sp
      0003CC 24 FC            [12] 1502 	add	a,#0xfc
      0003CE F5 81            [12] 1503 	mov	sp,a
                           0003D0  1504 	C$characters.c$118$4_0$56 ==.
                                   1505 ;	characters.c:118: printf_tiny("\n\rFree Spaces in buffer %d\n\r",(heap1 - storage));
      0003D0 90r00r00         [24] 1506 	mov	dptr,#_storage
      0003D3 E0               [24] 1507 	movx	a,@dptr
      0003D4 FE               [12] 1508 	mov	r6,a
      0003D5 A3               [24] 1509 	inc	dptr
      0003D6 E0               [24] 1510 	movx	a,@dptr
      0003D7 FF               [12] 1511 	mov	r7,a
      0003D8 90r00r00         [24] 1512 	mov	dptr,#_heap1
      0003DB E0               [24] 1513 	movx	a,@dptr
      0003DC FC               [12] 1514 	mov	r4,a
      0003DD A3               [24] 1515 	inc	dptr
      0003DE E0               [24] 1516 	movx	a,@dptr
      0003DF FD               [12] 1517 	mov	r5,a
      0003E0 EC               [12] 1518 	mov	a,r4
      0003E1 C3               [12] 1519 	clr	c
      0003E2 9E               [12] 1520 	subb	a,r6
      0003E3 FE               [12] 1521 	mov	r6,a
      0003E4 ED               [12] 1522 	mov	a,r5
      0003E5 9F               [12] 1523 	subb	a,r7
      0003E6 FF               [12] 1524 	mov	r7,a
      0003E7 C0 06            [24] 1525 	push	ar6
      0003E9 C0 07            [24] 1526 	push	ar7
      0003EB 74r91            [12] 1527 	mov	a,#___str_17
      0003ED C0 E0            [24] 1528 	push	acc
      0003EF 74s02            [12] 1529 	mov	a,#(___str_17 >> 8)
      0003F1 C0 E0            [24] 1530 	push	acc
      0003F3 12r00r00         [24] 1531 	lcall	_printf_tiny
      0003F6 E5 81            [12] 1532 	mov	a,sp
      0003F8 24 FC            [12] 1533 	add	a,#0xfc
      0003FA F5 81            [12] 1534 	mov	sp,a
      0003FC 80 0F            [24] 1535 	sjmp	00119$
      0003FE                       1536 00118$:
                           0003FE  1537 	C$characters.c$122$4_0$57 ==.
                                   1538 ;	characters.c:122: printf_tiny("\n\rBuffer 0 is empty , so no report is available!\r\n ");
      0003FE 74rAE            [12] 1539 	mov	a,#___str_18
      000400 C0 E0            [24] 1540 	push	acc
      000402 74s02            [12] 1541 	mov	a,#(___str_18 >> 8)
      000404 C0 E0            [24] 1542 	push	acc
      000406 12r00r00         [24] 1543 	lcall	_printf_tiny
      000409 15 81            [12] 1544 	dec	sp
      00040B 15 81            [12] 1545 	dec	sp
      00040D                       1546 00119$:
                           00040D  1547 	C$characters.c$125$3_0$55 ==.
                                   1548 ;	characters.c:125: if(buffer_1 != NULL)
      00040D 90r00r00         [24] 1549 	mov	dptr,#_buffer_1
      000410 E0               [24] 1550 	movx	a,@dptr
      000411 F5 F0            [12] 1551 	mov	b,a
      000413 A3               [24] 1552 	inc	dptr
      000414 E0               [24] 1553 	movx	a,@dptr
      000415 45 F0            [12] 1554 	orl	a,b
      000417 60 72            [24] 1555 	jz	00121$
                           000419  1556 	C$characters.c$127$4_0$58 ==.
                                   1557 ;	characters.c:127: printf_tiny("\n\r <<<<<<HEAP REPORT of Buffer_1>>>>>> \r\n");
      000419 74rE2            [12] 1558 	mov	a,#___str_19
      00041B C0 E0            [24] 1559 	push	acc
      00041D 74s02            [12] 1560 	mov	a,#(___str_19 >> 8)
      00041F C0 E0            [24] 1561 	push	acc
      000421 12r00r00         [24] 1562 	lcall	_printf_tiny
      000424 15 81            [12] 1563 	dec	sp
      000426 15 81            [12] 1564 	dec	sp
                           000428  1565 	C$characters.c$128$4_0$58 ==.
                                   1566 ;	characters.c:128: printf_tiny("\n\rStarting Address of Buffer_1 is 0x%x\n\r", buffer_1_address);
      000428 90r00r00         [24] 1567 	mov	dptr,#_buffer_1_address
      00042B E0               [24] 1568 	movx	a,@dptr
      00042C C0 E0            [24] 1569 	push	acc
      00042E A3               [24] 1570 	inc	dptr
      00042F E0               [24] 1571 	movx	a,@dptr
      000430 C0 E0            [24] 1572 	push	acc
      000432 74r0C            [12] 1573 	mov	a,#___str_20
      000434 C0 E0            [24] 1574 	push	acc
      000436 74s03            [12] 1575 	mov	a,#(___str_20 >> 8)
      000438 C0 E0            [24] 1576 	push	acc
      00043A 12r00r00         [24] 1577 	lcall	_printf_tiny
      00043D E5 81            [12] 1578 	mov	a,sp
      00043F 24 FC            [12] 1579 	add	a,#0xfc
      000441 F5 81            [12] 1580 	mov	sp,a
                           000443  1581 	C$characters.c$129$4_0$58 ==.
                                   1582 ;	characters.c:129: printf_tiny("\n\rEnding Address of Buffer_1 is 0x%x\n\r",buffer_1_address + heap1);
      000443 90r00r00         [24] 1583 	mov	dptr,#_heap1
      000446 E0               [24] 1584 	movx	a,@dptr
      000447 FE               [12] 1585 	mov	r6,a
      000448 A3               [24] 1586 	inc	dptr
      000449 E0               [24] 1587 	movx	a,@dptr
      00044A FF               [12] 1588 	mov	r7,a
      00044B 90r00r00         [24] 1589 	mov	dptr,#_buffer_1_address
      00044E E0               [24] 1590 	movx	a,@dptr
      00044F FC               [12] 1591 	mov	r4,a
      000450 A3               [24] 1592 	inc	dptr
      000451 E0               [24] 1593 	movx	a,@dptr
      000452 FD               [12] 1594 	mov	r5,a
      000453 EE               [12] 1595 	mov	a,r6
      000454 2C               [12] 1596 	add	a,r4
      000455 FE               [12] 1597 	mov	r6,a
      000456 EF               [12] 1598 	mov	a,r7
      000457 3D               [12] 1599 	addc	a,r5
      000458 FF               [12] 1600 	mov	r7,a
      000459 C0 06            [24] 1601 	push	ar6
      00045B C0 07            [24] 1602 	push	ar7
      00045D 74r35            [12] 1603 	mov	a,#___str_21
      00045F C0 E0            [24] 1604 	push	acc
      000461 74s03            [12] 1605 	mov	a,#(___str_21 >> 8)
      000463 C0 E0            [24] 1606 	push	acc
      000465 12r00r00         [24] 1607 	lcall	_printf_tiny
      000468 E5 81            [12] 1608 	mov	a,sp
      00046A 24 FC            [12] 1609 	add	a,#0xfc
      00046C F5 81            [12] 1610 	mov	sp,a
                           00046E  1611 	C$characters.c$130$4_0$58 ==.
                                   1612 ;	characters.c:130: printf_tiny("\n\rBuffer Size %d\n\r",heap1);
      00046E 90r00r00         [24] 1613 	mov	dptr,#_heap1
      000471 E0               [24] 1614 	movx	a,@dptr
      000472 C0 E0            [24] 1615 	push	acc
      000474 A3               [24] 1616 	inc	dptr
      000475 E0               [24] 1617 	movx	a,@dptr
      000476 C0 E0            [24] 1618 	push	acc
      000478 74r5C            [12] 1619 	mov	a,#___str_22
      00047A C0 E0            [24] 1620 	push	acc
      00047C 74s03            [12] 1621 	mov	a,#(___str_22 >> 8)
      00047E C0 E0            [24] 1622 	push	acc
      000480 12r00r00         [24] 1623 	lcall	_printf_tiny
      000483 E5 81            [12] 1624 	mov	a,sp
      000485 24 FC            [12] 1625 	add	a,#0xfc
      000487 F5 81            [12] 1626 	mov	sp,a
      000489 80 0F            [24] 1627 	sjmp	00166$
      00048B                       1628 00121$:
                           00048B  1629 	C$characters.c$135$4_0$59 ==.
                                   1630 ;	characters.c:135: printf_tiny("\n\rBuffer 1 is empty , so no report is available!\r\n ");
      00048B 74r6F            [12] 1631 	mov	a,#___str_23
      00048D C0 E0            [24] 1632 	push	acc
      00048F 74s03            [12] 1633 	mov	a,#(___str_23 >> 8)
      000491 C0 E0            [24] 1634 	push	acc
      000493 12r00r00         [24] 1635 	lcall	_printf_tiny
      000496 15 81            [12] 1636 	dec	sp
      000498 15 81            [12] 1637 	dec	sp
                           00049A  1638 	C$characters.c$138$1_0$45 ==.
                                   1639 ;	characters.c:138: for(int m=2;m<=(array_n+2);m++)
      00049A                       1640 00166$:
      00049A 7E 02            [12] 1641 	mov	r6,#0x02
      00049C 7F 00            [12] 1642 	mov	r7,#0x00
      00049E                       1643 00142$:
      00049E 90r00r6E         [24] 1644 	mov	dptr,#_enter_characters_array_n_65536_45
      0004A1 E0               [24] 1645 	movx	a,@dptr
      0004A2 FC               [12] 1646 	mov	r4,a
      0004A3 A3               [24] 1647 	inc	dptr
      0004A4 E0               [24] 1648 	movx	a,@dptr
      0004A5 FD               [12] 1649 	mov	r5,a
      0004A6 74 02            [12] 1650 	mov	a,#0x02
      0004A8 2C               [12] 1651 	add	a,r4
      0004A9 FC               [12] 1652 	mov	r4,a
      0004AA E4               [12] 1653 	clr	a
      0004AB 3D               [12] 1654 	addc	a,r5
      0004AC FD               [12] 1655 	mov	r5,a
      0004AD C3               [12] 1656 	clr	c
      0004AE EC               [12] 1657 	mov	a,r4
      0004AF 9E               [12] 1658 	subb	a,r6
      0004B0 ED               [12] 1659 	mov	a,r5
      0004B1 64 80            [12] 1660 	xrl	a,#0x80
      0004B3 8F F0            [24] 1661 	mov	b,r7
      0004B5 63 F0 80         [24] 1662 	xrl	b,#0x80
      0004B8 95 F0            [12] 1663 	subb	a,b
      0004BA 50 03            [24] 1664 	jnc	00258$
      0004BC 02r05rF3         [24] 1665 	ljmp	00126$
      0004BF                       1666 00258$:
                           0004BF  1667 	C$characters.c$140$5_0$61 ==.
                                   1668 ;	characters.c:140: if(buffer_n[m-2]!=NULL)
      0004BF 8E 05            [24] 1669 	mov	ar5,r6
      0004C1 ED               [12] 1670 	mov	a,r5
      0004C2 24 FE            [12] 1671 	add	a,#0xfe
      0004C4 FC               [12] 1672 	mov	r4,a
      0004C5 C2 D5            [12] 1673 	clr	F0
      0004C7 75 F0 02         [24] 1674 	mov	b,#0x02
      0004CA EC               [12] 1675 	mov	a,r4
      0004CB 30 E7 04         [24] 1676 	jnb	acc.7,00259$
      0004CE B2 D5            [12] 1677 	cpl	F0
      0004D0 F4               [12] 1678 	cpl	a
      0004D1 04               [12] 1679 	inc	a
      0004D2                       1680 00259$:
      0004D2 A4               [48] 1681 	mul	ab
      0004D3 30 D5 0A         [24] 1682 	jnb	F0,00260$
      0004D6 F4               [12] 1683 	cpl	a
      0004D7 24 01            [12] 1684 	add	a,#0x01
      0004D9 C5 F0            [12] 1685 	xch	a,b
      0004DB F4               [12] 1686 	cpl	a
      0004DC 34 00            [12] 1687 	addc	a,#0x00
      0004DE C5 F0            [12] 1688 	xch	a,b
      0004E0                       1689 00260$:
      0004E0 24r00            [12] 1690 	add	a,#_buffer_n
      0004E2 F5 82            [12] 1691 	mov	dpl,a
      0004E4 74s00            [12] 1692 	mov	a,#(_buffer_n >> 8)
      0004E6 35 F0            [12] 1693 	addc	a,b
      0004E8 F5 83            [12] 1694 	mov	dph,a
      0004EA E0               [24] 1695 	movx	a,@dptr
      0004EB FB               [12] 1696 	mov	r3,a
      0004EC A3               [24] 1697 	inc	dptr
      0004ED E0               [24] 1698 	movx	a,@dptr
      0004EE FC               [12] 1699 	mov	r4,a
      0004EF 4B               [12] 1700 	orl	a,r3
      0004F0 70 03            [24] 1701 	jnz	00261$
      0004F2 02r05rD4         [24] 1702 	ljmp	00124$
      0004F5                       1703 00261$:
                           0004F5  1704 	C$characters.c$142$6_0$62 ==.
                                   1705 ;	characters.c:142: printf_tiny("\n\r<<<<<<HEAP REPORT of Buffer_%d>>>>>>\n\r",m);
      0004F5 C0 07            [24] 1706 	push	ar7
      0004F7 C0 06            [24] 1707 	push	ar6
      0004F9 C0 05            [24] 1708 	push	ar5
      0004FB C0 06            [24] 1709 	push	ar6
      0004FD C0 07            [24] 1710 	push	ar7
      0004FF 74rA3            [12] 1711 	mov	a,#___str_24
      000501 C0 E0            [24] 1712 	push	acc
      000503 74s03            [12] 1713 	mov	a,#(___str_24 >> 8)
      000505 C0 E0            [24] 1714 	push	acc
      000507 12r00r00         [24] 1715 	lcall	_printf_tiny
      00050A E5 81            [12] 1716 	mov	a,sp
      00050C 24 FC            [12] 1717 	add	a,#0xfc
      00050E F5 81            [12] 1718 	mov	sp,a
      000510 D0 05            [24] 1719 	pop	ar5
      000512 D0 06            [24] 1720 	pop	ar6
      000514 D0 07            [24] 1721 	pop	ar7
                           000516  1722 	C$characters.c$143$6_0$62 ==.
                                   1723 ;	characters.c:143: printf_tiny("\n\rStart Address 0x%x\n\r",(unsigned int)buffer_n[m-2]);
      000516 1D               [12] 1724 	dec	r5
      000517 1D               [12] 1725 	dec	r5
      000518 C2 D5            [12] 1726 	clr	F0
      00051A 75 F0 02         [24] 1727 	mov	b,#0x02
      00051D ED               [12] 1728 	mov	a,r5
      00051E 30 E7 04         [24] 1729 	jnb	acc.7,00262$
      000521 B2 D5            [12] 1730 	cpl	F0
      000523 F4               [12] 1731 	cpl	a
      000524 04               [12] 1732 	inc	a
      000525                       1733 00262$:
      000525 A4               [48] 1734 	mul	ab
      000526 30 D5 0A         [24] 1735 	jnb	F0,00263$
      000529 F4               [12] 1736 	cpl	a
      00052A 24 01            [12] 1737 	add	a,#0x01
      00052C C5 F0            [12] 1738 	xch	a,b
      00052E F4               [12] 1739 	cpl	a
      00052F 34 00            [12] 1740 	addc	a,#0x00
      000531 C5 F0            [12] 1741 	xch	a,b
      000533                       1742 00263$:
      000533 24r00            [12] 1743 	add	a,#_buffer_n
      000535 FC               [12] 1744 	mov	r4,a
      000536 74s00            [12] 1745 	mov	a,#(_buffer_n >> 8)
      000538 35 F0            [12] 1746 	addc	a,b
      00053A FD               [12] 1747 	mov	r5,a
      00053B 8C 82            [24] 1748 	mov	dpl,r4
      00053D 8D 83            [24] 1749 	mov	dph,r5
      00053F E0               [24] 1750 	movx	a,@dptr
      000540 FA               [12] 1751 	mov	r2,a
      000541 A3               [24] 1752 	inc	dptr
      000542 E0               [24] 1753 	movx	a,@dptr
      000543 FB               [12] 1754 	mov	r3,a
      000544 C0 07            [24] 1755 	push	ar7
      000546 C0 06            [24] 1756 	push	ar6
      000548 C0 05            [24] 1757 	push	ar5
      00054A C0 04            [24] 1758 	push	ar4
      00054C C0 02            [24] 1759 	push	ar2
      00054E C0 03            [24] 1760 	push	ar3
      000550 74rCC            [12] 1761 	mov	a,#___str_25
      000552 C0 E0            [24] 1762 	push	acc
      000554 74s03            [12] 1763 	mov	a,#(___str_25 >> 8)
      000556 C0 E0            [24] 1764 	push	acc
      000558 12r00r00         [24] 1765 	lcall	_printf_tiny
      00055B E5 81            [12] 1766 	mov	a,sp
      00055D 24 FC            [12] 1767 	add	a,#0xfc
      00055F F5 81            [12] 1768 	mov	sp,a
      000561 D0 04            [24] 1769 	pop	ar4
      000563 D0 05            [24] 1770 	pop	ar5
      000565 D0 06            [24] 1771 	pop	ar6
      000567 D0 07            [24] 1772 	pop	ar7
                           000569  1773 	C$characters.c$144$6_0$62 ==.
                                   1774 ;	characters.c:144: printf_tiny("\n\rEnding Address 0x%x\n\r",(uint16_t)(buffer_n[m-2])+(uint16_t)(buff_size[m]));
      000569 8C 82            [24] 1775 	mov	dpl,r4
      00056B 8D 83            [24] 1776 	mov	dph,r5
      00056D E0               [24] 1777 	movx	a,@dptr
      00056E FC               [12] 1778 	mov	r4,a
      00056F A3               [24] 1779 	inc	dptr
      000570 E0               [24] 1780 	movx	a,@dptr
      000571 FD               [12] 1781 	mov	r5,a
      000572 EE               [12] 1782 	mov	a,r6
      000573 2E               [12] 1783 	add	a,r6
      000574 FA               [12] 1784 	mov	r2,a
      000575 EF               [12] 1785 	mov	a,r7
      000576 33               [12] 1786 	rlc	a
      000577 FB               [12] 1787 	mov	r3,a
      000578 EA               [12] 1788 	mov	a,r2
      000579 24r04            [12] 1789 	add	a,#_enter_characters_buff_size_65536_45
      00057B FA               [12] 1790 	mov	r2,a
      00057C EB               [12] 1791 	mov	a,r3
      00057D 34s00            [12] 1792 	addc	a,#(_enter_characters_buff_size_65536_45 >> 8)
      00057F FB               [12] 1793 	mov	r3,a
      000580 8A 82            [24] 1794 	mov	dpl,r2
      000582 8B 83            [24] 1795 	mov	dph,r3
      000584 E0               [24] 1796 	movx	a,@dptr
      000585 F8               [12] 1797 	mov	r0,a
      000586 A3               [24] 1798 	inc	dptr
      000587 E0               [24] 1799 	movx	a,@dptr
      000588 F9               [12] 1800 	mov	r1,a
      000589 E8               [12] 1801 	mov	a,r0
      00058A 2C               [12] 1802 	add	a,r4
      00058B FC               [12] 1803 	mov	r4,a
      00058C E9               [12] 1804 	mov	a,r1
      00058D 3D               [12] 1805 	addc	a,r5
      00058E FD               [12] 1806 	mov	r5,a
      00058F C0 07            [24] 1807 	push	ar7
      000591 C0 06            [24] 1808 	push	ar6
      000593 C0 03            [24] 1809 	push	ar3
      000595 C0 02            [24] 1810 	push	ar2
      000597 C0 04            [24] 1811 	push	ar4
      000599 C0 05            [24] 1812 	push	ar5
      00059B 74rE3            [12] 1813 	mov	a,#___str_26
      00059D C0 E0            [24] 1814 	push	acc
      00059F 74s03            [12] 1815 	mov	a,#(___str_26 >> 8)
      0005A1 C0 E0            [24] 1816 	push	acc
      0005A3 12r00r00         [24] 1817 	lcall	_printf_tiny
      0005A6 E5 81            [12] 1818 	mov	a,sp
      0005A8 24 FC            [12] 1819 	add	a,#0xfc
      0005AA F5 81            [12] 1820 	mov	sp,a
      0005AC D0 02            [24] 1821 	pop	ar2
      0005AE D0 03            [24] 1822 	pop	ar3
                           0005B0  1823 	C$characters.c$145$6_0$62 ==.
                                   1824 ;	characters.c:145: printf_tiny("\n\rBuffer Size%d\n\r",buff_size[m]);
      0005B0 8A 82            [24] 1825 	mov	dpl,r2
      0005B2 8B 83            [24] 1826 	mov	dph,r3
      0005B4 E0               [24] 1827 	movx	a,@dptr
      0005B5 FA               [12] 1828 	mov	r2,a
      0005B6 A3               [24] 1829 	inc	dptr
      0005B7 E0               [24] 1830 	movx	a,@dptr
      0005B8 FB               [12] 1831 	mov	r3,a
      0005B9 C0 02            [24] 1832 	push	ar2
      0005BB C0 03            [24] 1833 	push	ar3
      0005BD 74rFB            [12] 1834 	mov	a,#___str_27
      0005BF C0 E0            [24] 1835 	push	acc
      0005C1 74s03            [12] 1836 	mov	a,#(___str_27 >> 8)
      0005C3 C0 E0            [24] 1837 	push	acc
      0005C5 12r00r00         [24] 1838 	lcall	_printf_tiny
      0005C8 E5 81            [12] 1839 	mov	a,sp
      0005CA 24 FC            [12] 1840 	add	a,#0xfc
      0005CC F5 81            [12] 1841 	mov	sp,a
      0005CE D0 06            [24] 1842 	pop	ar6
      0005D0 D0 07            [24] 1843 	pop	ar7
      0005D2 80 17            [24] 1844 	sjmp	00143$
      0005D4                       1845 00124$:
                           0005D4  1846 	C$characters.c$150$6_0$63 ==.
                                   1847 ;	characters.c:150: printf_tiny("\n\rAll Buffers created are empty, so no heap report available!\r\n");
      0005D4 C0 07            [24] 1848 	push	ar7
      0005D6 C0 06            [24] 1849 	push	ar6
      0005D8 74r0D            [12] 1850 	mov	a,#___str_28
      0005DA C0 E0            [24] 1851 	push	acc
      0005DC 74s04            [12] 1852 	mov	a,#(___str_28 >> 8)
      0005DE C0 E0            [24] 1853 	push	acc
      0005E0 12r00r00         [24] 1854 	lcall	_printf_tiny
      0005E3 15 81            [12] 1855 	dec	sp
      0005E5 15 81            [12] 1856 	dec	sp
      0005E7 D0 06            [24] 1857 	pop	ar6
      0005E9 D0 07            [24] 1858 	pop	ar7
      0005EB                       1859 00143$:
                           0005EB  1860 	C$characters.c$138$4_0$60 ==.
                                   1861 ;	characters.c:138: for(int m=2;m<=(array_n+2);m++)
      0005EB 0E               [12] 1862 	inc	r6
      0005EC BE 00 01         [24] 1863 	cjne	r6,#0x00,00264$
      0005EF 0F               [12] 1864 	inc	r7
      0005F0                       1865 00264$:
      0005F0 02r04r9E         [24] 1866 	ljmp	00142$
      0005F3                       1867 00126$:
                           0005F3  1868 	C$characters.c$154$3_0$55 ==.
                                   1869 ;	characters.c:154: printf_tiny("\n\rNumber of storage characters = %d\n\r",storage);
      0005F3 90r00r00         [24] 1870 	mov	dptr,#_storage
      0005F6 E0               [24] 1871 	movx	a,@dptr
      0005F7 C0 E0            [24] 1872 	push	acc
      0005F9 A3               [24] 1873 	inc	dptr
      0005FA E0               [24] 1874 	movx	a,@dptr
      0005FB C0 E0            [24] 1875 	push	acc
      0005FD 74r4D            [12] 1876 	mov	a,#___str_29
      0005FF C0 E0            [24] 1877 	push	acc
      000601 74s04            [12] 1878 	mov	a,#(___str_29 >> 8)
      000603 C0 E0            [24] 1879 	push	acc
      000605 12r00r00         [24] 1880 	lcall	_printf_tiny
      000608 E5 81            [12] 1881 	mov	a,sp
      00060A 24 FC            [12] 1882 	add	a,#0xfc
      00060C F5 81            [12] 1883 	mov	sp,a
                           00060E  1884 	C$characters.c$155$3_0$55 ==.
                                   1885 ;	characters.c:155: break;
      00060E 02r08r1B         [24] 1886 	ljmp	00150$
                           000611  1887 	C$characters.c$158$2_0$46 ==.
                                   1888 ;	characters.c:158: case '=':
      000611                       1889 00127$:
                           000611  1890 	C$characters.c$160$3_0$64 ==.
                                   1891 ;	characters.c:160: DEBUGPORT(0x55);
      000611 90 00 55         [24] 1892 	mov	dptr,#0x0055
      000614 12r00r00         [24] 1893 	lcall	_dataout
                           000617  1894 	C$characters.c$161$3_0$64 ==.
                                   1895 ;	characters.c:161: printf_tiny("\n\rContents in Buffer 0\n\r");
      000617 74r73            [12] 1896 	mov	a,#___str_30
      000619 C0 E0            [24] 1897 	push	acc
      00061B 74s04            [12] 1898 	mov	a,#(___str_30 >> 8)
      00061D C0 E0            [24] 1899 	push	acc
      00061F 12r00r00         [24] 1900 	lcall	_printf_tiny
      000622 15 81            [12] 1901 	dec	sp
      000624 15 81            [12] 1902 	dec	sp
                           000626  1903 	C$characters.c$163$4_0$65 ==.
                                   1904 ;	characters.c:163: for((buff_0_count)=0;(buff_0_count)<storage;(buff_0_count)++)
      000626 90r00r68         [24] 1905 	mov	dptr,#_enter_characters_buff_0_count_65536_45
      000629 E4               [12] 1906 	clr	a
      00062A F0               [24] 1907 	movx	@dptr,a
      00062B A3               [24] 1908 	inc	dptr
      00062C F0               [24] 1909 	movx	@dptr,a
      00062D                       1910 00145$:
      00062D 90r00r68         [24] 1911 	mov	dptr,#_enter_characters_buff_0_count_65536_45
      000630 E0               [24] 1912 	movx	a,@dptr
      000631 FE               [12] 1913 	mov	r6,a
      000632 A3               [24] 1914 	inc	dptr
      000633 E0               [24] 1915 	movx	a,@dptr
      000634 FF               [12] 1916 	mov	r7,a
      000635 90r00r00         [24] 1917 	mov	dptr,#_storage
      000638 E0               [24] 1918 	movx	a,@dptr
      000639 FC               [12] 1919 	mov	r4,a
      00063A A3               [24] 1920 	inc	dptr
      00063B E0               [24] 1921 	movx	a,@dptr
      00063C FD               [12] 1922 	mov	r5,a
      00063D C3               [12] 1923 	clr	c
      00063E EE               [12] 1924 	mov	a,r6
      00063F 9C               [12] 1925 	subb	a,r4
      000640 EF               [12] 1926 	mov	a,r7
      000641 9D               [12] 1927 	subb	a,r5
      000642 40 03            [24] 1928 	jc	00265$
      000644 02r08r1B         [24] 1929 	ljmp	00150$
      000647                       1930 00265$:
                           000647  1931 	C$characters.c$165$5_0$66 ==.
                                   1932 ;	characters.c:165: if(buff_0_count==0)
      000647 EE               [12] 1933 	mov	a,r6
      000648 4F               [12] 1934 	orl	a,r7
      000649 70 31            [24] 1935 	jnz	00134$
                           00064B  1936 	C$characters.c$167$6_0$67 ==.
                                   1937 ;	characters.c:167: printf_tiny("0x%x>> %x",(uint16_t)(buffer_0+buff_0_count),*((buffer_0)+(buff_0_count)));
      00064B 90r00r00         [24] 1938 	mov	dptr,#_buffer_0
      00064E E0               [24] 1939 	movx	a,@dptr
      00064F FC               [12] 1940 	mov	r4,a
      000650 A3               [24] 1941 	inc	dptr
      000651 E0               [24] 1942 	movx	a,@dptr
      000652 FD               [12] 1943 	mov	r5,a
      000653 EE               [12] 1944 	mov	a,r6
      000654 2C               [12] 1945 	add	a,r4
      000655 FC               [12] 1946 	mov	r4,a
      000656 EF               [12] 1947 	mov	a,r7
      000657 3D               [12] 1948 	addc	a,r5
      000658 FD               [12] 1949 	mov	r5,a
      000659 8C 82            [24] 1950 	mov	dpl,r4
      00065B 8D 83            [24] 1951 	mov	dph,r5
      00065D E0               [24] 1952 	movx	a,@dptr
      00065E FB               [12] 1953 	mov	r3,a
      00065F 7A 00            [12] 1954 	mov	r2,#0x00
      000661 C0 03            [24] 1955 	push	ar3
      000663 C0 02            [24] 1956 	push	ar2
      000665 C0 04            [24] 1957 	push	ar4
      000667 C0 05            [24] 1958 	push	ar5
      000669 74r8C            [12] 1959 	mov	a,#___str_31
      00066B C0 E0            [24] 1960 	push	acc
      00066D 74s04            [12] 1961 	mov	a,#(___str_31 >> 8)
      00066F C0 E0            [24] 1962 	push	acc
      000671 12r00r00         [24] 1963 	lcall	_printf_tiny
      000674 E5 81            [12] 1964 	mov	a,sp
      000676 24 FA            [12] 1965 	add	a,#0xfa
      000678 F5 81            [12] 1966 	mov	sp,a
      00067A 80 67            [24] 1967 	sjmp	00146$
      00067C                       1968 00134$:
                           00067C  1969 	C$characters.c$169$5_0$66 ==.
                                   1970 ;	characters.c:169: else if((buff_0_count%16)!=0)
      00067C 74 0F            [12] 1971 	mov	a,#0x0f
      00067E 5E               [12] 1972 	anl	a,r6
      00067F FC               [12] 1973 	mov	r4,a
      000680 7D 00            [12] 1974 	mov	r5,#0x00
      000682 4D               [12] 1975 	orl	a,r5
      000683 60 2B            [24] 1976 	jz	00131$
                           000685  1977 	C$characters.c$171$6_0$68 ==.
                                   1978 ;	characters.c:171: printf_tiny(" %x",*((buffer_0)+(buff_0_count)));
      000685 90r00r00         [24] 1979 	mov	dptr,#_buffer_0
      000688 E0               [24] 1980 	movx	a,@dptr
      000689 FA               [12] 1981 	mov	r2,a
      00068A A3               [24] 1982 	inc	dptr
      00068B E0               [24] 1983 	movx	a,@dptr
      00068C FB               [12] 1984 	mov	r3,a
      00068D EE               [12] 1985 	mov	a,r6
      00068E 2A               [12] 1986 	add	a,r2
      00068F F5 82            [12] 1987 	mov	dpl,a
      000691 EF               [12] 1988 	mov	a,r7
      000692 3B               [12] 1989 	addc	a,r3
      000693 F5 83            [12] 1990 	mov	dph,a
      000695 E0               [24] 1991 	movx	a,@dptr
      000696 FB               [12] 1992 	mov	r3,a
      000697 7A 00            [12] 1993 	mov	r2,#0x00
      000699 C0 03            [24] 1994 	push	ar3
      00069B C0 02            [24] 1995 	push	ar2
      00069D 74r96            [12] 1996 	mov	a,#___str_32
      00069F C0 E0            [24] 1997 	push	acc
      0006A1 74s04            [12] 1998 	mov	a,#(___str_32 >> 8)
      0006A3 C0 E0            [24] 1999 	push	acc
      0006A5 12r00r00         [24] 2000 	lcall	_printf_tiny
      0006A8 E5 81            [12] 2001 	mov	a,sp
      0006AA 24 FC            [12] 2002 	add	a,#0xfc
      0006AC F5 81            [12] 2003 	mov	sp,a
      0006AE 80 33            [24] 2004 	sjmp	00146$
      0006B0                       2005 00131$:
                           0006B0  2006 	C$characters.c$173$5_0$66 ==.
                                   2007 ;	characters.c:173: else if(buff_0_count%16==0)
      0006B0 EC               [12] 2008 	mov	a,r4
      0006B1 4D               [12] 2009 	orl	a,r5
      0006B2 70 2F            [24] 2010 	jnz	00146$
                           0006B4  2011 	C$characters.c$175$6_0$69 ==.
                                   2012 ;	characters.c:175: printf_tiny("0x%x>> %x \n\r",(uint16_t)(buffer_0+buff_0_count),*((buffer_0)+(buff_0_count)));
      0006B4 90r00r00         [24] 2013 	mov	dptr,#_buffer_0
      0006B7 E0               [24] 2014 	movx	a,@dptr
      0006B8 FC               [12] 2015 	mov	r4,a
      0006B9 A3               [24] 2016 	inc	dptr
      0006BA E0               [24] 2017 	movx	a,@dptr
      0006BB FD               [12] 2018 	mov	r5,a
      0006BC EE               [12] 2019 	mov	a,r6
      0006BD 2C               [12] 2020 	add	a,r4
      0006BE FE               [12] 2021 	mov	r6,a
      0006BF EF               [12] 2022 	mov	a,r7
      0006C0 3D               [12] 2023 	addc	a,r5
      0006C1 FF               [12] 2024 	mov	r7,a
      0006C2 8E 82            [24] 2025 	mov	dpl,r6
      0006C4 8F 83            [24] 2026 	mov	dph,r7
      0006C6 E0               [24] 2027 	movx	a,@dptr
      0006C7 FD               [12] 2028 	mov	r5,a
      0006C8 7C 00            [12] 2029 	mov	r4,#0x00
      0006CA C0 05            [24] 2030 	push	ar5
      0006CC C0 04            [24] 2031 	push	ar4
      0006CE C0 06            [24] 2032 	push	ar6
      0006D0 C0 07            [24] 2033 	push	ar7
      0006D2 74r9A            [12] 2034 	mov	a,#___str_33
      0006D4 C0 E0            [24] 2035 	push	acc
      0006D6 74s04            [12] 2036 	mov	a,#(___str_33 >> 8)
      0006D8 C0 E0            [24] 2037 	push	acc
      0006DA 12r00r00         [24] 2038 	lcall	_printf_tiny
      0006DD E5 81            [12] 2039 	mov	a,sp
      0006DF 24 FA            [12] 2040 	add	a,#0xfa
      0006E1 F5 81            [12] 2041 	mov	sp,a
      0006E3                       2042 00146$:
                           0006E3  2043 	C$characters.c$163$4_0$65 ==.
                                   2044 ;	characters.c:163: for((buff_0_count)=0;(buff_0_count)<storage;(buff_0_count)++)
      0006E3 90r00r68         [24] 2045 	mov	dptr,#_enter_characters_buff_0_count_65536_45
      0006E6 E0               [24] 2046 	movx	a,@dptr
      0006E7 24 01            [12] 2047 	add	a,#0x01
      0006E9 F0               [24] 2048 	movx	@dptr,a
      0006EA A3               [24] 2049 	inc	dptr
      0006EB E0               [24] 2050 	movx	a,@dptr
      0006EC 34 00            [12] 2051 	addc	a,#0x00
      0006EE F0               [24] 2052 	movx	@dptr,a
      0006EF 02r06r2D         [24] 2053 	ljmp	00145$
                           0006F2  2054 	C$characters.c$182$2_0$46 ==.
                                   2055 ;	characters.c:182: case '@':
      0006F2                       2056 00137$:
                           0006F2  2057 	C$characters.c$184$3_0$70 ==.
                                   2058 ;	characters.c:184: DEBUGPORT(0x56);
      0006F2 90 00 56         [24] 2059 	mov	dptr,#0x0056
      0006F5 12r00r00         [24] 2060 	lcall	_dataout
                           0006F8  2061 	C$characters.c$185$3_0$70 ==.
                                   2062 ;	characters.c:185: printf_tiny("\n\rFree Buffer 0\n\r");
      0006F8 74rA7            [12] 2063 	mov	a,#___str_34
      0006FA C0 E0            [24] 2064 	push	acc
      0006FC 74s04            [12] 2065 	mov	a,#(___str_34 >> 8)
      0006FE C0 E0            [24] 2066 	push	acc
      000700 12r00r00         [24] 2067 	lcall	_printf_tiny
      000703 15 81            [12] 2068 	dec	sp
      000705 15 81            [12] 2069 	dec	sp
                           000707  2070 	C$characters.c$186$3_0$70 ==.
                                   2071 ;	characters.c:186: free(buffer_0); //frees buffer 0
      000707 90r00r00         [24] 2072 	mov	dptr,#_buffer_0
      00070A E0               [24] 2073 	movx	a,@dptr
      00070B FE               [12] 2074 	mov	r6,a
      00070C A3               [24] 2075 	inc	dptr
      00070D E0               [24] 2076 	movx	a,@dptr
      00070E FF               [12] 2077 	mov	r7,a
      00070F 7D 00            [12] 2078 	mov	r5,#0x00
      000711 8E 82            [24] 2079 	mov	dpl,r6
      000713 8F 83            [24] 2080 	mov	dph,r7
      000715 8D F0            [24] 2081 	mov	b,r5
      000717 12r00r00         [24] 2082 	lcall	_free
                           00071A  2083 	C$characters.c$187$3_0$70 ==.
                                   2084 ;	characters.c:187: buffer_0=NULL; //nulls buffer 0
      00071A 90r00r00         [24] 2085 	mov	dptr,#_buffer_0
      00071D E4               [12] 2086 	clr	a
      00071E F0               [24] 2087 	movx	@dptr,a
      00071F A3               [24] 2088 	inc	dptr
      000720 F0               [24] 2089 	movx	@dptr,a
                           000721  2090 	C$characters.c$188$3_0$70 ==.
                                   2091 ;	characters.c:188: storage = 0;
      000721 90r00r00         [24] 2092 	mov	dptr,#_storage
      000724 F0               [24] 2093 	movx	@dptr,a
      000725 A3               [24] 2094 	inc	dptr
      000726 F0               [24] 2095 	movx	@dptr,a
                           000727  2096 	C$characters.c$189$3_0$70 ==.
                                   2097 ;	characters.c:189: printf_tiny("\n\rBuffer 0 will now become empty\n\r");
      000727 74rB9            [12] 2098 	mov	a,#___str_35
      000729 C0 E0            [24] 2099 	push	acc
      00072B 74s04            [12] 2100 	mov	a,#(___str_35 >> 8)
      00072D C0 E0            [24] 2101 	push	acc
      00072F 12r00r00         [24] 2102 	lcall	_printf_tiny
      000732 15 81            [12] 2103 	dec	sp
      000734 15 81            [12] 2104 	dec	sp
                           000736  2105 	C$characters.c$191$3_0$70 ==.
                                   2106 ;	characters.c:191: printf_tiny("\n\rFreeing Buffer 1\n\r");
      000736 74rDC            [12] 2107 	mov	a,#___str_36
      000738 C0 E0            [24] 2108 	push	acc
      00073A 74s04            [12] 2109 	mov	a,#(___str_36 >> 8)
      00073C C0 E0            [24] 2110 	push	acc
      00073E 12r00r00         [24] 2111 	lcall	_printf_tiny
      000741 15 81            [12] 2112 	dec	sp
      000743 15 81            [12] 2113 	dec	sp
                           000745  2114 	C$characters.c$192$3_0$70 ==.
                                   2115 ;	characters.c:192: free(buffer_1); //frees buffer 1
      000745 90r00r00         [24] 2116 	mov	dptr,#_buffer_1
      000748 E0               [24] 2117 	movx	a,@dptr
      000749 FE               [12] 2118 	mov	r6,a
      00074A A3               [24] 2119 	inc	dptr
      00074B E0               [24] 2120 	movx	a,@dptr
      00074C FF               [12] 2121 	mov	r7,a
      00074D 7D 00            [12] 2122 	mov	r5,#0x00
      00074F 8E 82            [24] 2123 	mov	dpl,r6
      000751 8F 83            [24] 2124 	mov	dph,r7
      000753 8D F0            [24] 2125 	mov	b,r5
      000755 12r00r00         [24] 2126 	lcall	_free
                           000758  2127 	C$characters.c$193$3_0$70 ==.
                                   2128 ;	characters.c:193: buffer_1=NULL; //nulls buffer 1
      000758 90r00r00         [24] 2129 	mov	dptr,#_buffer_1
      00075B E4               [12] 2130 	clr	a
      00075C F0               [24] 2131 	movx	@dptr,a
      00075D A3               [24] 2132 	inc	dptr
      00075E F0               [24] 2133 	movx	@dptr,a
                           00075F  2134 	C$characters.c$194$3_0$70 ==.
                                   2135 ;	characters.c:194: printf_tiny("\n\rBuffer 1 is empty\n\r");
      00075F 74rF1            [12] 2136 	mov	a,#___str_37
      000761 C0 E0            [24] 2137 	push	acc
      000763 74s04            [12] 2138 	mov	a,#(___str_37 >> 8)
      000765 C0 E0            [24] 2139 	push	acc
      000767 12r00r00         [24] 2140 	lcall	_printf_tiny
      00076A 15 81            [12] 2141 	dec	sp
      00076C 15 81            [12] 2142 	dec	sp
                           00076E  2143 	C$characters.c$196$4_0$71 ==.
                                   2144 ;	characters.c:196: for(total_buffer_count=2;(total_buffer_count)<(array_n+2);(total_buffer_count)++)
      00076E 90r00r74         [24] 2145 	mov	dptr,#_enter_characters_total_buffer_count_65536_45
      000771 74 02            [12] 2146 	mov	a,#0x02
      000773 F0               [24] 2147 	movx	@dptr,a
      000774 E4               [12] 2148 	clr	a
      000775 A3               [24] 2149 	inc	dptr
      000776 F0               [24] 2150 	movx	@dptr,a
      000777                       2151 00148$:
      000777 90r00r6E         [24] 2152 	mov	dptr,#_enter_characters_array_n_65536_45
      00077A E0               [24] 2153 	movx	a,@dptr
      00077B FE               [12] 2154 	mov	r6,a
      00077C A3               [24] 2155 	inc	dptr
      00077D E0               [24] 2156 	movx	a,@dptr
      00077E FF               [12] 2157 	mov	r7,a
      00077F 74 02            [12] 2158 	mov	a,#0x02
      000781 2E               [12] 2159 	add	a,r6
      000782 FE               [12] 2160 	mov	r6,a
      000783 E4               [12] 2161 	clr	a
      000784 3F               [12] 2162 	addc	a,r7
      000785 FF               [12] 2163 	mov	r7,a
      000786 90r00r74         [24] 2164 	mov	dptr,#_enter_characters_total_buffer_count_65536_45
      000789 E0               [24] 2165 	movx	a,@dptr
      00078A FC               [12] 2166 	mov	r4,a
      00078B A3               [24] 2167 	inc	dptr
      00078C E0               [24] 2168 	movx	a,@dptr
      00078D FD               [12] 2169 	mov	r5,a
      00078E C3               [12] 2170 	clr	c
      00078F EC               [12] 2171 	mov	a,r4
      000790 9E               [12] 2172 	subb	a,r6
      000791 ED               [12] 2173 	mov	a,r5
      000792 9F               [12] 2174 	subb	a,r7
      000793 40 03            [24] 2175 	jc	00269$
      000795 02r08r1B         [24] 2176 	ljmp	00150$
      000798                       2177 00269$:
                           000798  2178 	C$characters.c$198$5_0$72 ==.
                                   2179 ;	characters.c:198: printf_tiny("\n\rFreeing buffer_%d\n\r",total_buffer_count);
      000798 C0 04            [24] 2180 	push	ar4
      00079A C0 05            [24] 2181 	push	ar5
      00079C 74r07            [12] 2182 	mov	a,#___str_38
      00079E C0 E0            [24] 2183 	push	acc
      0007A0 74s05            [12] 2184 	mov	a,#(___str_38 >> 8)
      0007A2 C0 E0            [24] 2185 	push	acc
      0007A4 12r00r00         [24] 2186 	lcall	_printf_tiny
      0007A7 E5 81            [12] 2187 	mov	a,sp
      0007A9 24 FC            [12] 2188 	add	a,#0xfc
      0007AB F5 81            [12] 2189 	mov	sp,a
                           0007AD  2190 	C$characters.c$199$5_0$72 ==.
                                   2191 ;	characters.c:199: free(buffer_n[total_buffer_count]); //frees buffer_n
      0007AD 90r00r74         [24] 2192 	mov	dptr,#_enter_characters_total_buffer_count_65536_45
      0007B0 E0               [24] 2193 	movx	a,@dptr
      0007B1 FE               [12] 2194 	mov	r6,a
      0007B2 A3               [24] 2195 	inc	dptr
      0007B3 E0               [24] 2196 	movx	a,@dptr
      0007B4 FF               [12] 2197 	mov	r7,a
      0007B5 EE               [12] 2198 	mov	a,r6
      0007B6 2E               [12] 2199 	add	a,r6
      0007B7 FE               [12] 2200 	mov	r6,a
      0007B8 EF               [12] 2201 	mov	a,r7
      0007B9 33               [12] 2202 	rlc	a
      0007BA FF               [12] 2203 	mov	r7,a
      0007BB EE               [12] 2204 	mov	a,r6
      0007BC 24r00            [12] 2205 	add	a,#_buffer_n
      0007BE F5 82            [12] 2206 	mov	dpl,a
      0007C0 EF               [12] 2207 	mov	a,r7
      0007C1 34s00            [12] 2208 	addc	a,#(_buffer_n >> 8)
      0007C3 F5 83            [12] 2209 	mov	dph,a
      0007C5 E0               [24] 2210 	movx	a,@dptr
      0007C6 FE               [12] 2211 	mov	r6,a
      0007C7 A3               [24] 2212 	inc	dptr
      0007C8 E0               [24] 2213 	movx	a,@dptr
      0007C9 FF               [12] 2214 	mov	r7,a
      0007CA 7D 00            [12] 2215 	mov	r5,#0x00
      0007CC 8E 82            [24] 2216 	mov	dpl,r6
      0007CE 8F 83            [24] 2217 	mov	dph,r7
      0007D0 8D F0            [24] 2218 	mov	b,r5
      0007D2 12r00r00         [24] 2219 	lcall	_free
                           0007D5  2220 	C$characters.c$200$5_0$72 ==.
                                   2221 ;	characters.c:200: buffer_n[array_n]=NULL; //nulls the buffer_n
      0007D5 90r00r6E         [24] 2222 	mov	dptr,#_enter_characters_array_n_65536_45
      0007D8 E0               [24] 2223 	movx	a,@dptr
      0007D9 FE               [12] 2224 	mov	r6,a
      0007DA A3               [24] 2225 	inc	dptr
      0007DB E0               [24] 2226 	movx	a,@dptr
      0007DC FF               [12] 2227 	mov	r7,a
      0007DD EE               [12] 2228 	mov	a,r6
      0007DE 2E               [12] 2229 	add	a,r6
      0007DF FE               [12] 2230 	mov	r6,a
      0007E0 EF               [12] 2231 	mov	a,r7
      0007E1 33               [12] 2232 	rlc	a
      0007E2 FF               [12] 2233 	mov	r7,a
      0007E3 EE               [12] 2234 	mov	a,r6
      0007E4 24r00            [12] 2235 	add	a,#_buffer_n
      0007E6 F5 82            [12] 2236 	mov	dpl,a
      0007E8 EF               [12] 2237 	mov	a,r7
      0007E9 34s00            [12] 2238 	addc	a,#(_buffer_n >> 8)
      0007EB F5 83            [12] 2239 	mov	dph,a
      0007ED E4               [12] 2240 	clr	a
      0007EE F0               [24] 2241 	movx	@dptr,a
      0007EF A3               [24] 2242 	inc	dptr
      0007F0 F0               [24] 2243 	movx	@dptr,a
                           0007F1  2244 	C$characters.c$201$5_0$72 ==.
                                   2245 ;	characters.c:201: printf_tiny("\n\rBuffer %d freed \n\r",total_buffer_count);
      0007F1 90r00r74         [24] 2246 	mov	dptr,#_enter_characters_total_buffer_count_65536_45
      0007F4 E0               [24] 2247 	movx	a,@dptr
      0007F5 C0 E0            [24] 2248 	push	acc
      0007F7 A3               [24] 2249 	inc	dptr
      0007F8 E0               [24] 2250 	movx	a,@dptr
      0007F9 C0 E0            [24] 2251 	push	acc
      0007FB 74r1D            [12] 2252 	mov	a,#___str_39
      0007FD C0 E0            [24] 2253 	push	acc
      0007FF 74s05            [12] 2254 	mov	a,#(___str_39 >> 8)
      000801 C0 E0            [24] 2255 	push	acc
      000803 12r00r00         [24] 2256 	lcall	_printf_tiny
      000806 E5 81            [12] 2257 	mov	a,sp
      000808 24 FC            [12] 2258 	add	a,#0xfc
      00080A F5 81            [12] 2259 	mov	sp,a
                           00080C  2260 	C$characters.c$196$4_0$71 ==.
                                   2261 ;	characters.c:196: for(total_buffer_count=2;(total_buffer_count)<(array_n+2);(total_buffer_count)++)
      00080C 90r00r74         [24] 2262 	mov	dptr,#_enter_characters_total_buffer_count_65536_45
      00080F E0               [24] 2263 	movx	a,@dptr
      000810 24 01            [12] 2264 	add	a,#0x01
      000812 F0               [24] 2265 	movx	@dptr,a
      000813 A3               [24] 2266 	inc	dptr
      000814 E0               [24] 2267 	movx	a,@dptr
      000815 34 00            [12] 2268 	addc	a,#0x00
      000817 F0               [24] 2269 	movx	@dptr,a
      000818 02r07r77         [24] 2270 	ljmp	00148$
                           00081B  2271 	C$characters.c$208$1_0$45 ==.
                                   2272 ;	characters.c:208: }
      00081B                       2273 00150$:
                           00081B  2274 	C$characters.c$209$1_0$45 ==.
                                   2275 ;	characters.c:209: }
                           00081B  2276 	C$characters.c$209$1_0$45 ==.
                           00081B  2277 	XG$enter_characters$0$0 ==.
      00081B 22               [24] 2278 	ret
                                   2279 	.area CSEG    (CODE)
                                   2280 	.area CONST   (CODE)
                           000000  2281 Fcharacters$__str_0$0_0$0 == .
                                   2282 	.area CONST   (CODE)
      000000                       2283 ___str_0:
      000000 41 6C 6C 6F 63 61 74  2284 	.ascii "Allocating a new buffer"
             69 6E 67 20 61 20 6E
             65 77 20 62 75 66 66
             65 72
      000017 0D                    2285 	.db 0x0d
      000018 0A                    2286 	.db 0x0a
      000019 00                    2287 	.db 0x00
                                   2288 	.area CSEG    (CODE)
                           00081C  2289 Fcharacters$__str_1$0_0$0 == .
                                   2290 	.area CONST   (CODE)
      00001A                       2291 ___str_1:
      00001A 0A                    2292 	.db 0x0a
      00001B 0D                    2293 	.db 0x0d
      00001C 20 4D 65 6D 6F 72 79  2294 	.ascii " Memory Allocation for Buffer %d Failed "
             20 41 6C 6C 6F 63 61
             74 69 6F 6E 20 66 6F
             72 20 42 75 66 66 65
             72 20 25 64 20 46 61
             69 6C 65 64 20
      000044 0A                    2295 	.db 0x0a
      000045 0D                    2296 	.db 0x0d
      000046 20 50 72 65 73 73 20  2297 	.ascii " Press '+' to Try again "
             27 2B 27 20 74 6F 20
             54 72 79 20 61 67 61
             69 6E 20
      00005E 0A                    2298 	.db 0x0a
      00005F 0D                    2299 	.db 0x0d
      000060 00                    2300 	.db 0x00
                                   2301 	.area CSEG    (CODE)
                           00081C  2302 Fcharacters$__str_2$0_0$0 == .
                                   2303 	.area CONST   (CODE)
      000061                       2304 ___str_2:
      000061 0A                    2305 	.db 0x0a
      000062 0D                    2306 	.db 0x0d
      000063 4D 65 6D 6F 72 79 20  2307 	.ascii "Memory Allocation Successful for Buffer %d "
             41 6C 6C 6F 63 61 74
             69 6F 6E 20 53 75 63
             63 65 73 73 66 75 6C
             20 66 6F 72 20 42 75
             66 66 65 72 20 25 64
             20
      00008E 0A                    2308 	.db 0x0a
      00008F 0D                    2309 	.db 0x0d
      000090 00                    2310 	.db 0x00
                                   2311 	.area CSEG    (CODE)
                           00081C  2312 Fcharacters$__str_3$0_0$0 == .
                                   2313 	.area CONST   (CODE)
      000091                       2314 ___str_3:
      000091 0A                    2315 	.db 0x0a
      000092 0D                    2316 	.db 0x0d
      000093 42 75 66 66 65 72 20  2317 	.ascii "Buffer %d allocated of size %d "
             25 64 20 61 6C 6C 6F
             63 61 74 65 64 20 6F
             66 20 73 69 7A 65 20
             25 64 20
      0000B2 0A                    2318 	.db 0x0a
      0000B3 0D                    2319 	.db 0x0d
      0000B4 00                    2320 	.db 0x00
                                   2321 	.area CSEG    (CODE)
                           00081C  2322 Fcharacters$__str_4$0_0$0 == .
                                   2323 	.area CONST   (CODE)
      0000B5                       2324 ___str_4:
      0000B5 0A                    2325 	.db 0x0a
      0000B6 0D                    2326 	.db 0x0d
      0000B7 41 64 64 72 65 73 73  2327 	.ascii "Address of buffer %d is 0x%x "
             20 6F 66 20 62 75 66
             66 65 72 20 25 64 20
             69 73 20 30 78 25 78
             20
      0000D4 0A                    2328 	.db 0x0a
      0000D5 0D                    2329 	.db 0x0d
      0000D6 00                    2330 	.db 0x00
                                   2331 	.area CSEG    (CODE)
                           00081C  2332 Fcharacters$__str_5$0_0$0 == .
                                   2333 	.area CONST   (CODE)
      0000D7                       2334 ___str_5:
      0000D7 50 6C 65 61 73 65 20  2335 	.ascii "Please enter the number of buffer to delete"
             65 6E 74 65 72 20 74
             68 65 20 6E 75 6D 62
             65 72 20 6F 66 20 62
             75 66 66 65 72 20 74
             6F 20 64 65 6C 65 74
             65
      000102 00                    2336 	.db 0x00
                                   2337 	.area CSEG    (CODE)
                           00081C  2338 Fcharacters$__str_6$0_0$0 == .
                                   2339 	.area CONST   (CODE)
      000103                       2340 ___str_6:
      000103 0A                    2341 	.db 0x0a
      000104 0D                    2342 	.db 0x0d
      000105 20 53 6F 72 72 79 2C  2343 	.ascii " Sorry, Buffer 0 cannot be deleted!"
             20 42 75 66 66 65 72
             20 30 20 63 61 6E 6E
             6F 74 20 62 65 20 64
             65 6C 65 74 65 64 21
      000128 0A                    2344 	.db 0x0a
      000129 0D                    2345 	.db 0x0d
      00012A 00                    2346 	.db 0x00
                                   2347 	.area CSEG    (CODE)
                           00081C  2348 Fcharacters$__str_7$0_0$0 == .
                                   2349 	.area CONST   (CODE)
      00012B                       2350 ___str_7:
      00012B 0A                    2351 	.db 0x0a
      00012C 0D                    2352 	.db 0x0d
      00012D 20 42 75 66 66 65 72  2353 	.ascii " Buffer 1> %d"
             20 31 3E 20 25 64
      00013A 0A                    2354 	.db 0x0a
      00013B 0D                    2355 	.db 0x0d
      00013C 00                    2356 	.db 0x00
                                   2357 	.area CSEG    (CODE)
                           00081C  2358 Fcharacters$__str_8$0_0$0 == .
                                   2359 	.area CONST   (CODE)
      00013D                       2360 ___str_8:
      00013D 42 75 66 66 65 72 20  2361 	.ascii "Buffer 1 deleted."
             31 20 64 65 6C 65 74
             65 64 2E
      00014E 0D                    2362 	.db 0x0d
      00014F 0A                    2363 	.db 0x0a
      000150 00                    2364 	.db 0x00
                                   2365 	.area CSEG    (CODE)
                           00081C  2366 Fcharacters$__str_9$0_0$0 == .
                                   2367 	.area CONST   (CODE)
      000151                       2368 ___str_9:
      000151 0A                    2369 	.db 0x0a
      000152 0D                    2370 	.db 0x0d
      000153 20 44 65 6C 65 74 69  2371 	.ascii " Deleting buffer %d in progress"
             6E 67 20 62 75 66 66
             65 72 20 25 64 20 69
             6E 20 70 72 6F 67 72
             65 73 73
      000172 0A                    2372 	.db 0x0a
      000173 0D                    2373 	.db 0x0d
      000174 00                    2374 	.db 0x00
                                   2375 	.area CSEG    (CODE)
                           00081C  2376 Fcharacters$__str_10$0_0$0 == .
                                   2377 	.area CONST   (CODE)
      000175                       2378 ___str_10:
      000175 0A                    2379 	.db 0x0a
      000176 0D                    2380 	.db 0x0d
      000177 20 42 75 66 66 65 72  2381 	.ascii " Buffer %d is free"
             20 25 64 20 69 73 20
             66 72 65 65
      000189 0A                    2382 	.db 0x0a
      00018A 0D                    2383 	.db 0x0d
      00018B 00                    2384 	.db 0x00
                                   2385 	.area CSEG    (CODE)
                           00081C  2386 Fcharacters$__str_11$0_0$0 == .
                                   2387 	.area CONST   (CODE)
      00018C                       2388 ___str_11:
      00018C 0A                    2389 	.db 0x0a
      00018D 0D                    2390 	.db 0x0d
      00018E 45 6E 74 65 72 20 61  2391 	.ascii "Enter a valid buffer number"
             20 76 61 6C 69 64 20
             62 75 66 66 65 72 20
             6E 75 6D 62 65 72
      0001A9 0A                    2392 	.db 0x0a
      0001AA 0D                    2393 	.db 0x0d
      0001AB 20 50 72 65 73 73 20  2394 	.ascii " Press '-' to delete any valid buffer"
             27 2D 27 20 74 6F 20
             64 65 6C 65 74 65 20
             61 6E 79 20 76 61 6C
             69 64 20 62 75 66 66
             65 72
      0001D0 0A                    2395 	.db 0x0a
      0001D1 0D                    2396 	.db 0x0d
      0001D2 00                    2397 	.db 0x00
                                   2398 	.area CSEG    (CODE)
                           00081C  2399 Fcharacters$__str_12$0_0$0 == .
                                   2400 	.area CONST   (CODE)
      0001D3                       2401 ___str_12:
      0001D3 0A                    2402 	.db 0x0a
      0001D4 0D                    2403 	.db 0x0d
      0001D5 20 3C 3C 3C 3C 3C 3C  2404 	.ascii " <<<<<<HEAP REPORT of Buffer_0>>>>>> "
             48 45 41 50 20 52 45
             50 4F 52 54 20 6F 66
             20 42 75 66 66 65 72
             5F 30 3E 3E 3E 3E 3E
             3E 20
      0001FA 0D                    2405 	.db 0x0d
      0001FB 0A                    2406 	.db 0x0a
      0001FC 00                    2407 	.db 0x00
                                   2408 	.area CSEG    (CODE)
                           00081C  2409 Fcharacters$__str_13$0_0$0 == .
                                   2410 	.area CONST   (CODE)
      0001FD                       2411 ___str_13:
      0001FD 0A                    2412 	.db 0x0a
      0001FE 0D                    2413 	.db 0x0d
      0001FF 53 74 61 72 74 69 6E  2414 	.ascii "Starting Address of Buffer_0 is 0x%x"
             67 20 41 64 64 72 65
             73 73 20 6F 66 20 42
             75 66 66 65 72 5F 30
             20 69 73 20 30 78 25
             78
      000223 0A                    2415 	.db 0x0a
      000224 0D                    2416 	.db 0x0d
      000225 00                    2417 	.db 0x00
                                   2418 	.area CSEG    (CODE)
                           00081C  2419 Fcharacters$__str_14$0_0$0 == .
                                   2420 	.area CONST   (CODE)
      000226                       2421 ___str_14:
      000226 0A                    2422 	.db 0x0a
      000227 0D                    2423 	.db 0x0d
      000228 45 6E 64 69 6E 67 20  2424 	.ascii "Ending Address of Buffer_0 is 0x%x"
             41 64 64 72 65 73 73
             20 6F 66 20 42 75 66
             66 65 72 5F 30 20 69
             73 20 30 78 25 78
      00024A 0A                    2425 	.db 0x0a
      00024B 0D                    2426 	.db 0x0d
      00024C 00                    2427 	.db 0x00
                                   2428 	.area CSEG    (CODE)
                           00081C  2429 Fcharacters$__str_15$0_0$0 == .
                                   2430 	.area CONST   (CODE)
      00024D                       2431 ___str_15:
      00024D 0A                    2432 	.db 0x0a
      00024E 0D                    2433 	.db 0x0d
      00024F 42 75 66 66 65 72 20  2434 	.ascii "Buffer Size of Buffer_0 %d"
             53 69 7A 65 20 6F 66
             20 42 75 66 66 65 72
             5F 30 20 25 64
      000269 0A                    2435 	.db 0x0a
      00026A 0D                    2436 	.db 0x0d
      00026B 00                    2437 	.db 0x00
                                   2438 	.area CSEG    (CODE)
                           00081C  2439 Fcharacters$__str_16$0_0$0 == .
                                   2440 	.area CONST   (CODE)
      00026C                       2441 ___str_16:
      00026C 0A                    2442 	.db 0x0a
      00026D 0D                    2443 	.db 0x0d
      00026E 53 74 6F 72 65 64 20  2444 	.ascii "Stored characters in buffer = %d"
             63 68 61 72 61 63 74
             65 72 73 20 69 6E 20
             62 75 66 66 65 72 20
             3D 20 25 64
      00028E 0A                    2445 	.db 0x0a
      00028F 0D                    2446 	.db 0x0d
      000290 00                    2447 	.db 0x00
                                   2448 	.area CSEG    (CODE)
                           00081C  2449 Fcharacters$__str_17$0_0$0 == .
                                   2450 	.area CONST   (CODE)
      000291                       2451 ___str_17:
      000291 0A                    2452 	.db 0x0a
      000292 0D                    2453 	.db 0x0d
      000293 46 72 65 65 20 53 70  2454 	.ascii "Free Spaces in buffer %d"
             61 63 65 73 20 69 6E
             20 62 75 66 66 65 72
             20 25 64
      0002AB 0A                    2455 	.db 0x0a
      0002AC 0D                    2456 	.db 0x0d
      0002AD 00                    2457 	.db 0x00
                                   2458 	.area CSEG    (CODE)
                           00081C  2459 Fcharacters$__str_18$0_0$0 == .
                                   2460 	.area CONST   (CODE)
      0002AE                       2461 ___str_18:
      0002AE 0A                    2462 	.db 0x0a
      0002AF 0D                    2463 	.db 0x0d
      0002B0 42 75 66 66 65 72 20  2464 	.ascii "Buffer 0 is empty , so no report is available!"
             30 20 69 73 20 65 6D
             70 74 79 20 2C 20 73
             6F 20 6E 6F 20 72 65
             70 6F 72 74 20 69 73
             20 61 76 61 69 6C 61
             62 6C 65 21
      0002DE 0D                    2465 	.db 0x0d
      0002DF 0A                    2466 	.db 0x0a
      0002E0 20                    2467 	.ascii " "
      0002E1 00                    2468 	.db 0x00
                                   2469 	.area CSEG    (CODE)
                           00081C  2470 Fcharacters$__str_19$0_0$0 == .
                                   2471 	.area CONST   (CODE)
      0002E2                       2472 ___str_19:
      0002E2 0A                    2473 	.db 0x0a
      0002E3 0D                    2474 	.db 0x0d
      0002E4 20 3C 3C 3C 3C 3C 3C  2475 	.ascii " <<<<<<HEAP REPORT of Buffer_1>>>>>> "
             48 45 41 50 20 52 45
             50 4F 52 54 20 6F 66
             20 42 75 66 66 65 72
             5F 31 3E 3E 3E 3E 3E
             3E 20
      000309 0D                    2476 	.db 0x0d
      00030A 0A                    2477 	.db 0x0a
      00030B 00                    2478 	.db 0x00
                                   2479 	.area CSEG    (CODE)
                           00081C  2480 Fcharacters$__str_20$0_0$0 == .
                                   2481 	.area CONST   (CODE)
      00030C                       2482 ___str_20:
      00030C 0A                    2483 	.db 0x0a
      00030D 0D                    2484 	.db 0x0d
      00030E 53 74 61 72 74 69 6E  2485 	.ascii "Starting Address of Buffer_1 is 0x%x"
             67 20 41 64 64 72 65
             73 73 20 6F 66 20 42
             75 66 66 65 72 5F 31
             20 69 73 20 30 78 25
             78
      000332 0A                    2486 	.db 0x0a
      000333 0D                    2487 	.db 0x0d
      000334 00                    2488 	.db 0x00
                                   2489 	.area CSEG    (CODE)
                           00081C  2490 Fcharacters$__str_21$0_0$0 == .
                                   2491 	.area CONST   (CODE)
      000335                       2492 ___str_21:
      000335 0A                    2493 	.db 0x0a
      000336 0D                    2494 	.db 0x0d
      000337 45 6E 64 69 6E 67 20  2495 	.ascii "Ending Address of Buffer_1 is 0x%x"
             41 64 64 72 65 73 73
             20 6F 66 20 42 75 66
             66 65 72 5F 31 20 69
             73 20 30 78 25 78
      000359 0A                    2496 	.db 0x0a
      00035A 0D                    2497 	.db 0x0d
      00035B 00                    2498 	.db 0x00
                                   2499 	.area CSEG    (CODE)
                           00081C  2500 Fcharacters$__str_22$0_0$0 == .
                                   2501 	.area CONST   (CODE)
      00035C                       2502 ___str_22:
      00035C 0A                    2503 	.db 0x0a
      00035D 0D                    2504 	.db 0x0d
      00035E 42 75 66 66 65 72 20  2505 	.ascii "Buffer Size %d"
             53 69 7A 65 20 25 64
      00036C 0A                    2506 	.db 0x0a
      00036D 0D                    2507 	.db 0x0d
      00036E 00                    2508 	.db 0x00
                                   2509 	.area CSEG    (CODE)
                           00081C  2510 Fcharacters$__str_23$0_0$0 == .
                                   2511 	.area CONST   (CODE)
      00036F                       2512 ___str_23:
      00036F 0A                    2513 	.db 0x0a
      000370 0D                    2514 	.db 0x0d
      000371 42 75 66 66 65 72 20  2515 	.ascii "Buffer 1 is empty , so no report is available!"
             31 20 69 73 20 65 6D
             70 74 79 20 2C 20 73
             6F 20 6E 6F 20 72 65
             70 6F 72 74 20 69 73
             20 61 76 61 69 6C 61
             62 6C 65 21
      00039F 0D                    2516 	.db 0x0d
      0003A0 0A                    2517 	.db 0x0a
      0003A1 20                    2518 	.ascii " "
      0003A2 00                    2519 	.db 0x00
                                   2520 	.area CSEG    (CODE)
                           00081C  2521 Fcharacters$__str_24$0_0$0 == .
                                   2522 	.area CONST   (CODE)
      0003A3                       2523 ___str_24:
      0003A3 0A                    2524 	.db 0x0a
      0003A4 0D                    2525 	.db 0x0d
      0003A5 3C 3C 3C 3C 3C 3C 48  2526 	.ascii "<<<<<<HEAP REPORT of Buffer_%d>>>>>>"
             45 41 50 20 52 45 50
             4F 52 54 20 6F 66 20
             42 75 66 66 65 72 5F
             25 64 3E 3E 3E 3E 3E
             3E
      0003C9 0A                    2527 	.db 0x0a
      0003CA 0D                    2528 	.db 0x0d
      0003CB 00                    2529 	.db 0x00
                                   2530 	.area CSEG    (CODE)
                           00081C  2531 Fcharacters$__str_25$0_0$0 == .
                                   2532 	.area CONST   (CODE)
      0003CC                       2533 ___str_25:
      0003CC 0A                    2534 	.db 0x0a
      0003CD 0D                    2535 	.db 0x0d
      0003CE 53 74 61 72 74 20 41  2536 	.ascii "Start Address 0x%x"
             64 64 72 65 73 73 20
             30 78 25 78
      0003E0 0A                    2537 	.db 0x0a
      0003E1 0D                    2538 	.db 0x0d
      0003E2 00                    2539 	.db 0x00
                                   2540 	.area CSEG    (CODE)
                           00081C  2541 Fcharacters$__str_26$0_0$0 == .
                                   2542 	.area CONST   (CODE)
      0003E3                       2543 ___str_26:
      0003E3 0A                    2544 	.db 0x0a
      0003E4 0D                    2545 	.db 0x0d
      0003E5 45 6E 64 69 6E 67 20  2546 	.ascii "Ending Address 0x%x"
             41 64 64 72 65 73 73
             20 30 78 25 78
      0003F8 0A                    2547 	.db 0x0a
      0003F9 0D                    2548 	.db 0x0d
      0003FA 00                    2549 	.db 0x00
                                   2550 	.area CSEG    (CODE)
                           00081C  2551 Fcharacters$__str_27$0_0$0 == .
                                   2552 	.area CONST   (CODE)
      0003FB                       2553 ___str_27:
      0003FB 0A                    2554 	.db 0x0a
      0003FC 0D                    2555 	.db 0x0d
      0003FD 42 75 66 66 65 72 20  2556 	.ascii "Buffer Size%d"
             53 69 7A 65 25 64
      00040A 0A                    2557 	.db 0x0a
      00040B 0D                    2558 	.db 0x0d
      00040C 00                    2559 	.db 0x00
                                   2560 	.area CSEG    (CODE)
                           00081C  2561 Fcharacters$__str_28$0_0$0 == .
                                   2562 	.area CONST   (CODE)
      00040D                       2563 ___str_28:
      00040D 0A                    2564 	.db 0x0a
      00040E 0D                    2565 	.db 0x0d
      00040F 41 6C 6C 20 42 75 66  2566 	.ascii "All Buffers created are empty, so no heap report available!"
             66 65 72 73 20 63 72
             65 61 74 65 64 20 61
             72 65 20 65 6D 70 74
             79 2C 20 73 6F 20 6E
             6F 20 68 65 61 70 20
             72 65 70 6F 72 74 20
             61 76 61 69 6C 61 62
             6C 65 21
      00044A 0D                    2567 	.db 0x0d
      00044B 0A                    2568 	.db 0x0a
      00044C 00                    2569 	.db 0x00
                                   2570 	.area CSEG    (CODE)
                           00081C  2571 Fcharacters$__str_29$0_0$0 == .
                                   2572 	.area CONST   (CODE)
      00044D                       2573 ___str_29:
      00044D 0A                    2574 	.db 0x0a
      00044E 0D                    2575 	.db 0x0d
      00044F 4E 75 6D 62 65 72 20  2576 	.ascii "Number of storage characters = %d"
             6F 66 20 73 74 6F 72
             61 67 65 20 63 68 61
             72 61 63 74 65 72 73
             20 3D 20 25 64
      000470 0A                    2577 	.db 0x0a
      000471 0D                    2578 	.db 0x0d
      000472 00                    2579 	.db 0x00
                                   2580 	.area CSEG    (CODE)
                           00081C  2581 Fcharacters$__str_30$0_0$0 == .
                                   2582 	.area CONST   (CODE)
      000473                       2583 ___str_30:
      000473 0A                    2584 	.db 0x0a
      000474 0D                    2585 	.db 0x0d
      000475 43 6F 6E 74 65 6E 74  2586 	.ascii "Contents in Buffer 0"
             73 20 69 6E 20 42 75
             66 66 65 72 20 30
      000489 0A                    2587 	.db 0x0a
      00048A 0D                    2588 	.db 0x0d
      00048B 00                    2589 	.db 0x00
                                   2590 	.area CSEG    (CODE)
                           00081C  2591 Fcharacters$__str_31$0_0$0 == .
                                   2592 	.area CONST   (CODE)
      00048C                       2593 ___str_31:
      00048C 30 78 25 78 3E 3E 20  2594 	.ascii "0x%x>> %x"
             25 78
      000495 00                    2595 	.db 0x00
                                   2596 	.area CSEG    (CODE)
                           00081C  2597 Fcharacters$__str_32$0_0$0 == .
                                   2598 	.area CONST   (CODE)
      000496                       2599 ___str_32:
      000496 20 25 78              2600 	.ascii " %x"
      000499 00                    2601 	.db 0x00
                                   2602 	.area CSEG    (CODE)
                           00081C  2603 Fcharacters$__str_33$0_0$0 == .
                                   2604 	.area CONST   (CODE)
      00049A                       2605 ___str_33:
      00049A 30 78 25 78 3E 3E 20  2606 	.ascii "0x%x>> %x "
             25 78 20
      0004A4 0A                    2607 	.db 0x0a
      0004A5 0D                    2608 	.db 0x0d
      0004A6 00                    2609 	.db 0x00
                                   2610 	.area CSEG    (CODE)
                           00081C  2611 Fcharacters$__str_34$0_0$0 == .
                                   2612 	.area CONST   (CODE)
      0004A7                       2613 ___str_34:
      0004A7 0A                    2614 	.db 0x0a
      0004A8 0D                    2615 	.db 0x0d
      0004A9 46 72 65 65 20 42 75  2616 	.ascii "Free Buffer 0"
             66 66 65 72 20 30
      0004B6 0A                    2617 	.db 0x0a
      0004B7 0D                    2618 	.db 0x0d
      0004B8 00                    2619 	.db 0x00
                                   2620 	.area CSEG    (CODE)
                           00081C  2621 Fcharacters$__str_35$0_0$0 == .
                                   2622 	.area CONST   (CODE)
      0004B9                       2623 ___str_35:
      0004B9 0A                    2624 	.db 0x0a
      0004BA 0D                    2625 	.db 0x0d
      0004BB 42 75 66 66 65 72 20  2626 	.ascii "Buffer 0 will now become empty"
             30 20 77 69 6C 6C 20
             6E 6F 77 20 62 65 63
             6F 6D 65 20 65 6D 70
             74 79
      0004D9 0A                    2627 	.db 0x0a
      0004DA 0D                    2628 	.db 0x0d
      0004DB 00                    2629 	.db 0x00
                                   2630 	.area CSEG    (CODE)
                           00081C  2631 Fcharacters$__str_36$0_0$0 == .
                                   2632 	.area CONST   (CODE)
      0004DC                       2633 ___str_36:
      0004DC 0A                    2634 	.db 0x0a
      0004DD 0D                    2635 	.db 0x0d
      0004DE 46 72 65 65 69 6E 67  2636 	.ascii "Freeing Buffer 1"
             20 42 75 66 66 65 72
             20 31
      0004EE 0A                    2637 	.db 0x0a
      0004EF 0D                    2638 	.db 0x0d
      0004F0 00                    2639 	.db 0x00
                                   2640 	.area CSEG    (CODE)
                           00081C  2641 Fcharacters$__str_37$0_0$0 == .
                                   2642 	.area CONST   (CODE)
      0004F1                       2643 ___str_37:
      0004F1 0A                    2644 	.db 0x0a
      0004F2 0D                    2645 	.db 0x0d
      0004F3 42 75 66 66 65 72 20  2646 	.ascii "Buffer 1 is empty"
             31 20 69 73 20 65 6D
             70 74 79
      000504 0A                    2647 	.db 0x0a
      000505 0D                    2648 	.db 0x0d
      000506 00                    2649 	.db 0x00
                                   2650 	.area CSEG    (CODE)
                           00081C  2651 Fcharacters$__str_38$0_0$0 == .
                                   2652 	.area CONST   (CODE)
      000507                       2653 ___str_38:
      000507 0A                    2654 	.db 0x0a
      000508 0D                    2655 	.db 0x0d
      000509 46 72 65 65 69 6E 67  2656 	.ascii "Freeing buffer_%d"
             20 62 75 66 66 65 72
             5F 25 64
      00051A 0A                    2657 	.db 0x0a
      00051B 0D                    2658 	.db 0x0d
      00051C 00                    2659 	.db 0x00
                                   2660 	.area CSEG    (CODE)
                           00081C  2661 Fcharacters$__str_39$0_0$0 == .
                                   2662 	.area CONST   (CODE)
      00051D                       2663 ___str_39:
      00051D 0A                    2664 	.db 0x0a
      00051E 0D                    2665 	.db 0x0d
      00051F 42 75 66 66 65 72 20  2666 	.ascii "Buffer %d freed "
             25 64 20 66 72 65 65
             64 20
      00052F 0A                    2667 	.db 0x0a
      000530 0D                    2668 	.db 0x0d
      000531 00                    2669 	.db 0x00
                                   2670 	.area CSEG    (CODE)
                                   2671 	.area XINIT   (CODE)
                                   2672 	.area CABS    (ABS,CODE)
